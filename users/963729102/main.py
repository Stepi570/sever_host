from datetime import datetime
import os
import platform
import sys
import logging
import asyncio
import tempfile
from threading import Thread
import zipfile
import pandas
from aiogram.filters import or_f
import zipfile
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from datetime import time
import time
import signal
from datetime import datetime
import threading
import mimetypes
import time
import codecs
import traceback,shutil
from aiogram.types import BufferedInputFile
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from aiogram.types import Message
from collections import defaultdict
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import subprocess
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.filters import StateFilter
import pandas as pd
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.types import InputFile 
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ContentType
df = pd.read_csv("users.csv", sep=';')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8064787079:AAEeiUgA6T0aGBj2pX13x-KPysYfgmZfuQA"
admin=5143785189
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

id_from_user=1
sell_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buyy")]
    ]
)

admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é')],
        [KeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É'),
         KeyboardButton(text='–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')],
        [KeyboardButton(text='–ù–∞–∑–∞–¥')]],
    resize_keyboard=True
)

otmena_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]],
    resize_keyboard=True)


main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ú–µ–Ω—é'),
        KeyboardButton(text='–û –Ω–∞—Å')]],
    resize_keyboard=True
)
many_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é')],
        [KeyboardButton(text='–†—É–ª–µ—Ç –º–µ—Ä–µ–Ω–≥–æ–≤—ã–π'),
         KeyboardButton(text='–î–µ—Å–µ—Ä—Ç –≤ —Å—Ç–∞–∫–∞–Ω–µ')],
        [KeyboardButton(text='–ü–∏—Ä–æ–∂–Ω–æ–µ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–∞'),
         KeyboardButton(text='')],
        [KeyboardButton(text='–ù–∞–∑–∞–¥')]],
    resize_keyboard=True
)



redukt_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é')],
        [KeyboardButton(text='–†—É–ª–µ—Ç –º–µ—Ä–µ–Ω–≥–æ–≤—ã–π'),
         KeyboardButton(text='–î–µ—Å–µ—Ä—Ç –≤ —Å—Ç–∞–∫–∞–Ω–µ')],
        [KeyboardButton(text='–ü–∏—Ä–æ–∂–Ω–æ–µ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–∞'),
         KeyboardButton(text='')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]],
    resize_keyboard=True
)

class BroadcastState(StatesGroup):
    zakaz = State()
    sms =State()
    sms1 =State()
    punkt=State()
    text_global=State()
    text1=State()
    text2=State()
    text3=State()
    text4=State()
    photo_global=State()
    photo1=State()
    photo2=State()
    photo3=State()
    photo4=State()
    

async def cek_photo(ph):
    df = pd.read_csv("post.csv", sep=';')
    y=(df[df['number'] == str(ph)])['photo'].iloc[0]
    return y

async def cek_info(clik):
    df = pd.read_csv("post.csv", sep=';')
    x=(df[df['number'] == str(clik)])['text'].iloc[0]
    return x

async def subscribers():
    t=[]
    df = pd.read_csv("users.csv", sep=';')
    id_list = df["ID"].tolist()
    user_list = df["Name"].tolist()
    for i in range(len(id_list)):
        us=f"{str(user_list[i])}"
        if us == "@None":
            us= "–ù–µ—Ç"
        t.append(f'{i+1}) –ò–º—è: {us} ID: {id_list[i]}')
    return t

async def BZ(username,ID):
    df = pd.read_csv("users.csv", sep=';')
    l=df["ID"].tolist()
    if not(ID in l):
        new_row = pd.DataFrame([{'Name': f'@{username}', 'ID': ID}])
        df = pd.concat([df, new_row], ignore_index=True)
        df.to_csv("users.csv", sep=';', index=False)
        await bot.send_message(chat_id=str(admin),text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \n @{username}\nID: {ID}")
    else:
        df.loc[df[df['ID'] == ID].index,"Name"]=str(f"@{username}")
        df.to_csv("users.csv", sep=';', index=False)

@dp.message(F.text == '–û—Ç–º–µ–Ω–∞', StateFilter('*'))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMIaBD51DXYPWbHQEUgz6qXCMd4Y7YAAjb1MRvAfIhIBLsTl99B6XABAAMCAAN5AAM2BA",
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω –ø–∏—Ä–æ–∂–Ω—ã—Ö! üéÇ‚ú® \n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –Ω–µ–±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø–∏—Ä–æ–∂–Ω—ã—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é –∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞–¥—É—é—Ç –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö.\n–ü—Ä–∏—è—Ç–Ω—ã–µ —Ü–µ–Ω—ã!\n–¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–ª–∞–¥–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üç∞‚ù§Ô∏è",
        reply_markup=main_keyboard,
        
        parse_mode='HTML')
    await state.clear()


@dp.message(F.text == '–ù–∞–∑–∞–¥')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMIaBD51DXYPWbHQEUgz6qXCMd4Y7YAAjb1MRvAfIhIBLsTl99B6XABAAMCAAN5AAM2BA",
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω –ø–∏—Ä–æ–∂–Ω—ã—Ö! üéÇ‚ú® \n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –Ω–µ–±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø–∏—Ä–æ–∂–Ω—ã—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é –∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞–¥—É—é—Ç –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö.\n–ü—Ä–∏—è—Ç–Ω—ã–µ —Ü–µ–Ω—ã!\n–¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–ª–∞–¥–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üç∞‚ù§Ô∏è",
        reply_markup=main_keyboard,
        
        parse_mode='HTML')
    await state.clear()


@dp.message((F.text).lower() == '–∞–¥–º–∏–Ω')
async def cmd_start(message: types.Message, state: FSMContext):
    global admin
    if not(str(message.from_user.id) == str(admin)):
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–¥–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)

@dp.message(F.text == '–°–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É')
async def cmd_start(message: types.Message, state: FSMContext):
    global admin
    if not(str(message.from_user.id) == str(admin)):
        return
    t=await subscribers()
    cht=len(t)
    while True:
        await message.answer('\n'.join(t[:70]))
        if cht >= 70:
            del t[:70]
            cht=cht-70
        else:
            break

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(BroadcastState.sms)

@dp.message(F.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é')
async def cmd_start(message: types.Message, state: FSMContext):
    global admin
    if not(str(message.from_user.id) == str(admin)):
        return
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", reply_markup=redukt_keyboard)
    await state.set_state(BroadcastState.punkt)


@dp.message((lambda message: message.text in ['–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é', '–ö–∞–ø–∫–µ–π–∫–∏', '–ü–∏—Ä–æ–∂–Ω–æ–µ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–∞', '–†—É–ª–µ—Ç –º–µ—Ä–µ–Ω–≥–æ–≤—ã–π', '–î–µ—Å–µ—Ä—Ç –≤ —Å—Ç–∞–∫–∞–Ω–µ']) and StateFilter(BroadcastState.punkt))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    if str(message.text) == '–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é':
        await state.set_state(BroadcastState.text_global)
    elif str(message.text) == '–†—É–ª–µ—Ç –º–µ—Ä–µ–Ω–≥–æ–≤—ã–π':
        await state.set_state(BroadcastState.text1)
    elif str(message.text) == '–î–µ—Å–µ—Ä—Ç –≤ —Å—Ç–∞–∫–∞–Ω–µ':
        await state.set_state(BroadcastState.text2)
    elif str(message.text) == '–ü–∏—Ä–æ–∂–Ω–æ–µ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–∞':
        await state.set_state(BroadcastState.text3)
    elif str(message.text) == '–ö–∞–ø–∫–µ–π–∫–∏':
        await state.set_state(BroadcastState.text4)  
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –ø—É–Ω–∫—Ç–µ:",reply_markup=otmena_keyboard)


@dp.message(
    or_f(
        BroadcastState.text_global,
        BroadcastState.text1,
        BroadcastState.text2,
        BroadcastState.text3,
        BroadcastState.text4
    ),
    F.text
)
async def cmd_start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    mess = message.text.replace('\n', '<br>')
    
    try:
        df = pd.read_csv("post.csv", sep=';')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_mapping = {
            BroadcastState.text_global.state: 'menu',
            BroadcastState.text1.state: 'cake',
            BroadcastState.text2.state: 'cookie',
            BroadcastState.text3.state: 'muffins',
            BroadcastState.text4.state: 'cupcakes'
        }
        
        condition = state_mapping.get(current_state)
        if not condition:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", reply_markup=otmena_keyboard)
            return
        df.loc[df['number'] == condition, 'text'] = mess
        df.to_csv("post.csv", sep=';', index=False)
        
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é(–µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç')", reply_markup=redukt_keyboard)
        await state.clear()
        if condition == "menu":
            await state.set_state(BroadcastState.photo_global) 
        elif condition == 'cake':
            await state.set_state(BroadcastState.photo1)
        elif condition == 'cookie':
            await state.set_state(BroadcastState.photo2) 
        elif condition == 'muffins':
            await state.set_state(BroadcastState.photo3) 
        elif condition == 'cupcakes':
            await state.set_state(BroadcastState.photo4) 

    except Exception as e:
        logging.error(f"Error: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")




@dp.message(
    or_f(
        BroadcastState.photo_global,
        BroadcastState.photo1,
        BroadcastState.photo2,
        BroadcastState.photo3,
        BroadcastState.photo4
    )
)
async def cmd_start(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    df = pd.read_csv("post.csv", sep=';')
    state_mapping = {
            BroadcastState.photo_global.state: 'menu',
            BroadcastState.photo1.state: 'cake',
            BroadcastState.photo2.state: 'cookie',
            BroadcastState.photo3.state: 'muffins',
            BroadcastState.photo4.state: 'cupcakes'
        }
    condition = state_mapping.get(current_state)
    if (str(message.text)).lower() == "–Ω–µ—Ç":
        df.loc[df['number'] == str(condition), 'photo'] = "None"
        df.to_csv("post.csv", sep=';', index=False)
        await message.answer('–û—Ç–ª—á–Ω–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=redukt_keyboard)
        await state.set_state(BroadcastState.punkt)
        return
    else:
        if message.text:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", reply_markup=otmena_keyboard)
            return
    photo_id = message.photo[-1].file_id
    df.loc[df['number'] == condition, 'photo'] = photo_id
    df.to_csv("post.csv", sep=';', index=False)
    await message.answer('–û—Ç–ª—á–Ω–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=redukt_keyboard)
    await state.set_state(BroadcastState.punkt)




@dp.message(StateFilter(BroadcastState.sms))
async def cmd_start(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–õ—É—á—à–µ –≤—Å–µ —Ç–∞–∫–∏ —Ç–µ–∫—Å—Ç–æ–º")
        return
    global id_from_user
    id_from_user=message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É:")
    await state.clear()
    await state.set_state(BroadcastState.sms1)

@dp.message(StateFilter(BroadcastState.sms1))
async def cmd_start(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–õ—É—á—à–µ –≤—Å–µ —Ç–∞–∫–∏ —Ç–µ–∫—Å—Ç–æ–º")
        return
    global id_from_user
    await bot.send_message(chat_id=id_from_user, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n{message.text}')
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    await state.clear()



@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await BZ(username=(message.from_user.username),ID=(message.from_user.id))
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMIaBD51DXYPWbHQEUgz6qXCMd4Y7YAAjb1MRvAfIhIBLsTl99B6XABAAMCAAN5AAM2BA",
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–º–∞–≥–∞–∑–∏–Ω –ø–∏—Ä–æ–∂–Ω—ã—Ö! üéÇ‚ú® \n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º –Ω–µ–±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–≤–µ–∂–∏—Ö –∏ –≤–∫—É—Å–Ω—ã—Ö –ø–∏—Ä–æ–∂–Ω—ã—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å –ª—é–±–æ–≤—å—é –∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞–¥—É—é—Ç –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö.\n–ü—Ä–∏—è—Ç–Ω—ã–µ —Ü–µ–Ω—ã!\n–¢–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑!\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–ª–∞–¥–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üç∞‚ù§Ô∏è",
        reply_markup=main_keyboard,
        parse_mode='HTML')
    await state.clear()

@dp.message(F.text == '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')
async def cmd_start(message: types.Message, state: FSMContext):
    global admin
    if not(str(message.from_user.id) == str(admin)):
        return
    t=await subscribers()
    cht=len(t)
    while True:
        await message.answer('\n'.join(t[:70]))
        if cht >= 70:
            del t[:70]
            cht=cht-70
        else:
            return
        
        
    



@dp.message(F.text == '–û –Ω–∞—Å')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–û –Ω–∞—Å\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Å–ª–∞–¥–æ—Å—Ç–µ–π! –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–µ–∫—Å–∏–∫–æ–≤, –ø–µ—á–µ–Ω–µ–∫ –∏ –¥—Ä—É–≥–∏—Ö –≤–∫—É—Å–Ω—ã—Ö –¥–µ—Å–µ—Ä—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞–¥—É—é—Ç –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö. –ù–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å –ª—é–±–æ–≤—å—é –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã, —Ç–∞–∫ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –º–æ–≥ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É. –£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–ª–∞–¥–æ—Å—Ç–∏ –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–≤–æ–¥–∞ ‚Äî –æ—Ç —É—é—Ç–Ω–æ–≥–æ —á–∞–µ–ø–∏—Ç–∏—è –¥–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ —Å—Ç–æ–ª–∞. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–ª–∞–¥–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")
    await state.clear()
@dp.message(F.text == '–ú–µ–Ω—é')
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å:", reply_markup=many_keyboard)
    await state.clear()



@router.callback_query(F.data == "cancel")
async def process_buy(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        text="–û—Ç–º–µ–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:",
        parse_mode="HTML",
        reply_markup=main_keyboard
    )
    await callback.answer()
    await state.clear()




@router.callback_query(F.data == "buyy")
async def process_buy(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        text="üìù <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>\n\n"
             "‚îå –ò–º—è\n"
             "‚îú –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
             "‚îú –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n"
             "‚îî –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
             "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
             "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞\n"
             "+79161234567\n"
             "–ö–µ–∫—Å –≤–∞–Ω–∏–ª—å–Ω—ã–π √ó2, –ö–∞–ø–∫–µ–π–∫ –∫–ª—É–±–Ω–∏—á–Ω—ã–π √ó1\n"
             "–ú–æ—Å–∫–≤–∞, —É–ª. –°–ª–∞–¥–∫–∞—è, –¥. 15, –∫–≤. 76",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel")]
        ])
    )
    await callback.answer()
    await state.set_state(BroadcastState.zakaz)



@dp.message(F.text == '–î–µ—Å–µ—Ä—Ç –≤ —Å—Ç–∞–∫–∞–Ω–µ')
async def show_cookies(message: types.Message, state: FSMContext):
    y=str(await cek_photo("cookie"))
    x=(str(await cek_info("cookie"))).replace("<br>","\n")
    if y == "nan":
        await message.answer(x,reply_markup=sell_keyboard)
    else:
        await message.answer_photo(
            photo=y,
            caption=x,
            reply_markup=sell_keyboard,
            parse_mode=None,
        )
    await state.clear()

@dp.message(F.text == '–†—É–ª–µ—Ç –º–µ—Ä–µ–Ω–≥–æ–≤—ã–π')
async def show_cupcakes(message: types.Message, state: FSMContext):
    y=str(await cek_photo("cake"))
    x=(str(await cek_info("cake"))).replace("<br>","\n")
    if y == "nan":
        await message.answer(x,reply_markup=sell_keyboard)
    else:
        await message.answer_photo(
            photo=y,
            caption=x,
            reply_markup=sell_keyboard,
            parse_mode=None,
        )
    await state.clear()


@dp.message(F.text == '–ü–∏—Ä–æ–∂–Ω–æ–µ –ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–∞')
async def show_muffins(message: types.Message, state: FSMContext):
    y=str(await cek_photo("muffins"))
    x=(str(await cek_info("muffins"))).replace("<br>","\n")
    if y == "nan":
        await message.answer(x,reply_markup=sell_keyboard)
    else:
        await message.answer_photo(
            photo=y,
            caption=x,
            reply_markup=sell_keyboard,
            parse_mode=None,
        )
    await state.clear()

@dp.message(F.text == '–ö–∞–ø–∫–µ–π–∫–∏')
async def show_cupcakes(message: types.Message, state: FSMContext):
    y=str(await cek_photo("cupcakes"))
    x=(str(await cek_info("cupcakes"))).replace("<br>","\n")
    if y == "nan":
        await message.answer(x,reply_markup=sell_keyboard)
    else:
        await message.answer_photo(
            photo=y,
            caption=x,
            reply_markup=sell_keyboard,
            parse_mode=None,
        )
    await state.clear()


@dp.message(F.text == '–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start(message: types.Message, state: FSMContext):
    y=str(await cek_photo("menu"))
    x=(str(await cek_info("menu"))).replace("<br>","\n")
    if y == "nan":
        await message.answer(x,reply_markup=sell_keyboard)
    else:
        await message.answer_photo(
            photo=y,
            caption=x,
            reply_markup=sell_keyboard,
            parse_mode=None,
        )
    await state.clear()

@dp.message(StateFilter(BroadcastState.zakaz))
async def cmd_start(message: types.Message, state: FSMContext):
    global admin
    user_id = message.from_user.id
    if str(f'@{message.from_user.username}') == "@None":
        uz="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        uz=str(f'@{message.from_user.username}')

    await bot.send_message(admin,f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ \n–ß–µ–ª–æ–≤–µ–∫: {uz}\nID: {message.from_user.id}\n\n–¢–µ–∫—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞:\n{message.text}')
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ —Å–∫–æ—Ä–æ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä ")
    await state.clear()




@dp.message()
async def wrong_command(message: types.Message, state: FSMContext):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ—è –Ω–∞–ø–∏—à–∏ /start")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Critical error: {e}")