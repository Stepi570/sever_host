    #by @killerskype 2days

import os
import re
import json
import tempfile
import sqlite3
import logging
import uuid
import asyncio
import aiohttp
import random
import string
from datetime import datetime, timedelta
from aiogram.types import InputFile
from telethon import functions
from aiogram.utils.exceptions import TelegramAPIError
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonSpam, InputReportReasonViolence, InputReportReasonPornography, InputReportReasonChildAbuse, InputReportReasonOther
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiocryptopay import AioCryptoPay, Networks
from telethon.tl.types import InputReportReasonSpam, User, Channel, Chat
from logging.handlers import RotatingFileHandler
from telethon.tl.functions.channels import GetChannelsRequest
from telethon.tl.types import InputChannel
from telethon.sessions import SQLiteSession, StringSession
from telethon.errors import SessionPasswordNeededError, PhoneNumberInvalidError
from telethon.tl.types import InputPeerChannel, Channel
CURRENT_DISCOUNT_PERCENT = 0.0  # —Å–∫–∏–¥–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞

import sqlite3


# –ú–æ–Ω–æ–ø–∞—Ç—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
import builtins
original_input = builtins.input

def non_interactive_input(prompt=""):
    logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt}")
    if "phone" in prompt.lower() or "bot token" in prompt.lower():
        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        raise RuntimeError(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥: {prompt}")
    return original_input(prompt)

builtins.input = non_interactive_input

with open('config.json') as f:
    config = json.load(f)
API_TOKEN = config['bot_token']
API_ID = config['API_ID']
API_HASH = config['API_HASH']
ADMIN_IDS = config['admin_ids']
DB_NAME = 'subscriptions.db'
SESSIONS_DIR = 'sessions'
LOG_CHANNEL_ID = config['LOG_CHANNEL_ID']
BOT_USERNAME = config['bot_username']
MENU_PHOTO = config["menu_photo"]
image_path = "menu.jpg"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

send_reports_lock = asyncio.Lock()

def log_to_file(text: str):
    with open("report_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"{datetime.now().isoformat()} ‚Äî {text}\n")

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
root_logger = logging.getLogger()
root_logger.handlers = []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –†–æ—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
handler = RotatingFileHandler(
    'bot.log',
    maxBytes=5*1024*1024,  # 5 MB
    backupCount=3,
    encoding='utf-8'
)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

logger.info("üîÑ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏...")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ReportStates(StatesGroup):
    waiting_for_link = State()
    waiting_for_reason = State()

# Admin FSM States
class AdminStates(StatesGroup):
    waiting_for_sub_user_id = State()
    waiting_for_sub_days = State()
    waiting_for_unsub_user_id = State()
    waiting_for_balance_user_id = State()
    waiting_for_balance_amount = State()
    waiting_for_wl_user_id = State()
    waiting_for_remove_wl_user_id = State()
    waiting_for_bl_user_id = State()
    waiting_for_bl_reason = State()
    waiting_for_unbl_user_id = State()
    waiting_for_user_info_id = State()
    waiting_for_broadcast_message = State()
    waiting_for_discount_percent = State()
    waiting_for_promo_days = State()

class PaymentStates(StatesGroup):
    amount = State()
    confirm_payment = State()
    buy_subscription = State() 

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
class PromoStates(StatesGroup):
    waiting_for_code = State()

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            join_date TEXT NOT NULL,
            subscription_end TEXT,
            referrer_id INTEGER,
            balance REAL DEFAULT 0.0,
            valid_referrals INTEGER DEFAULT 0,
            referral_cycles INTEGER DEFAULT 0,
            is_bot BOOLEAN DEFAULT FALSE,
            channel_subscription BOOLEAN DEFAULT FALSE
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            invoice_id TEXT PRIMARY KEY,
            user_id INTEGER NOT NULL,
            amount REAL NOT NULL,
            status TEXT NOT NULL DEFAULT 'pending',
            created_at TEXT NOT NULL,
            updated_at TEXT,
            message_id INTEGER,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS whitelist (
            user_id INTEGER,
            group_id INTEGER,
            added_by INTEGER,
            added_at TEXT NOT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS logs (
            log_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            action TEXT,
            timestamp TEXT NOT NULL
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            days INTEGER NOT NULL,
            created_by INTEGER NOT NULL,
            created_at TEXT NOT NULL,
            used_by INTEGER,
            used_at TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS blacklist (
            user_id INTEGER PRIMARY KEY,
            added_by INTEGER NOT NULL,
            reason TEXT,
            added_at TEXT NOT NULL
        )
    ''')
    
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_users_subscription 
        ON users(subscription_end)
    ''')
    
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_payments_user 
        ON payments(user_id)
    ''')
    
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_whitelist_group 
        ON whitelist(group_id)
    ''')
    
    conn.commit()
    conn.close()

def is_reporting_enabled():
    if not os.path.exists("reports_enabled.txt"):
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
    with open("reports_enabled.txt", "r") as f:
        return f.read().strip() == "1"

def check_channel_subscription_db(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT channel_subscription FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

def set_reporting_enabled(enabled: bool):
    with open("reports_enabled.txt", "w") as f:
        f.write("1" if enabled else "0")


async def save_payment_to_db(invoice_id: str, user_id: int, amount: float, message_id: int):
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        cursor.execute('''
            INSERT INTO payments 
            (invoice_id, user_id, amount, created_at, message_id) 
            VALUES (?, ?, ?, ?, ?)
        ''', (invoice_id, user_id, amount, created_at, message_id))
        conn.commit()
    finally:
        conn.close()

def check_whitelist_table():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='whitelist'
        ''')
        if not cursor.fetchone():
            logging.critical("Whitelist table not found!")
            raise RuntimeError("Whitelist table missing")

def log_to_file(text: str):
    with open("report_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"{datetime.now().isoformat()} ‚Äî {text}\n")

def check_db_schema():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(users)")
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
    for column in cursor.fetchall():
        print(column)
    conn.close()

def reset_db():
    if os.path.exists(DB_NAME):
        os.remove(DB_NAME)
    init_db()

def get_user(user_id: int):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user or [None] * 4  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç

def safe_init_db():
    try:
        init_db()
        print("Database initialized successfully")
    except Exception as e:
        print(f"Database initialization failed: {str(e)}")
        raise

def migrate_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute('ALTER TABLE whitelist ADD COLUMN group_id INTEGER')
    except sqlite3.OperationalError:
        pass
    conn.commit()
    conn.close()

def add_user(user_id: int, join_date: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users 
        (user_id, join_date) 
        VALUES (?, ?)
    ''', (user_id, join_date))
    conn.commit()
    conn.close()

def check_subscription(user_id: int) -> bool:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT subscription_end FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or not result[0]:
        return False

    subscription_end = datetime.fromisoformat(result[0])
    return datetime.now() < subscription_end

@dp.message_handler(commands=['debug_group'])
async def debug_group(message: types.Message):
    try:
        group_id = int(config["LOG_CHANNEL_ID"])
        chat = await bot.get_chat(group_id)
        await message.answer(f"""
            üß∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:
            ID: {chat.id}
            –¢–∏–ø: {chat.type}
            –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
            –ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {chat.permissions.can_send_messages}
        """)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def update_subscription(user_id: int, subscription_end: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users 
        SET subscription_end = ?
        WHERE user_id = ?
    ''', (subscription_end, user_id))
    conn.commit()
    conn.close()

def setup_crypto() -> AioCryptoPay:
    return AioCryptoPay(
        token=config['crypto_pay_token'],
        network=Networks.MAIN_NET,
        session=aiohttp.ClientSession()
    )


def get_main_menu_keyboard(user_id=None):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üß∏ | –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É", callback_data="cn0c"),
        types.InlineKeyboardButton("üë§ | –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        types.InlineKeyboardButton("üë• | –†–µ—Ñ–µ—Ä–∞–ª", callback_data="referral"),
        types.InlineKeyboardButton("üí≥ | –∫—É–ø–∏—Ç—å —à–æ–∫–æ–ª–∞–¥ ", callback_data="topup_start"),
        types.InlineKeyboardButton("‚ÑπÔ∏è | fobio pizza info", callback_data="info"),
        types.InlineKeyboardButton("üéÅ | –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_activate")
    ]
    
    # Add admin menu button if user is admin
    if user_id and user_id in ADMIN_IDS:
        buttons.append(types.InlineKeyboardButton("üîß | –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu"))
    
    keyboard.add(*buttons[:2])
    keyboard.add(buttons[2])
    keyboard.add(buttons[3])
    keyboard.add(buttons[4])
    keyboard.add(buttons[5])
    if len(buttons) > 6:  # Add admin button if present
        keyboard.add(buttons[6])
    return keyboard

def is_in_whitelist(user_id: int) -> bool:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM whitelist WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def is_in_blacklist(user_id: int) -> bool:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM blacklist WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def confirm_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
    )
    return keyboard

def get_subscription_plans_keyboard():
    global CURRENT_DISCOUNT_PERCENT

    PRICES = {
        '1': {'days': 1, 'price': 2},
        '7': {'days': 7, 'price': 5},
        '30': {'days': 30, 'price': 9},
        'lifetime': {'days': 36500, 'price': 20},
        'channel': {'days': 36500, 'price': 3}
    }

    keyboard = types.InlineKeyboardMarkup(row_width=1)

    for key, plan in PRICES.items():
        price = plan['price']
        if key != '1' and CURRENT_DISCOUNT_PERCENT > 0:
            discount = price * (CURRENT_DISCOUNT_PERCENT / 100)
            price -= discount
            price = round(price, 2)
        label = ""
        if key == '1':
            label = f"1Ô∏è‚É£ 1 –¥–µ–Ω—å - {price}$"
        elif key == '7':
            label = f"7Ô∏è‚É£ 7 –¥–Ω–µ–π - {price}$"
        elif key == '30':
            label = f"3Ô∏è‚É£0Ô∏è‚É£ 30 –¥–Ω–µ–π - {price}$"
        elif key == 'lifetime':
            label = f"‚ôæÔ∏è Lifetime - {price}$"
        elif key == 'channel':
            label = f"üí• –ø–∏—Ü—Ü–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ (–Ω–∞–≤—Å–µ–≥–¥–∞) - {price}$"

        keyboard.add(types.InlineKeyboardButton(label, callback_data=f"sub_{key}"))

    keyboard.add(types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    return keyboard

def get_admin_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="admin_subscriptions"),
        types.InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º", callback_data="admin_balance"),
        types.InlineKeyboardButton("üìã Whitelist/Blacklist", callback_data="admin_wl_bl"),
        types.InlineKeyboardButton("üßÆ –°–∫–∏–¥–∫–∏", callback_data="admin_discounts"),
        types.InlineKeyboardButton("üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("üìÑ –ò–Ω—Ñ–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_user_info"),
        types.InlineKeyboardButton("üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–º–∏", callback_data="admin_reports"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    return keyboard

def get_subscriptions_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üìÖ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_sub_grant"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_sub_revoke"),
        types.InlineKeyboardButton("üìã –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö —Å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="admin_sub_list"),
        types.InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="admin_promo_create"),
        types.InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="admin_promo_list"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

def get_balance_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_balance_add"),
        types.InlineKeyboardButton("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_balance_sub"),
        types.InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö", callback_data="admin_balance_list"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

def get_wl_bl_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ whitelist", callback_data="admin_wl_add"),
        types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ whitelist", callback_data="admin_wl_remove"),
        types.InlineKeyboardButton("‚õî –î–æ–±–∞–≤–∏—Ç—å –≤ blacklist", callback_data="admin_bl_add"),
        types.InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å –∏–∑ blacklist", callback_data="admin_bl_remove"),
        types.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤ blacklist", callback_data="admin_bl_list"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

def get_broadcast_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üì¢ —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast_send"),
        types.InlineKeyboardButton("üìù –¢–µ—Å—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_test_log"),
        types.InlineKeyboardButton("üõ† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥-–≥—Ä—É–ø–ø—É", callback_data="admin_debug_group"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

def get_discounts_menu_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ôªÔ∏è –£–±—Ä–∞—Ç—å –≤—Å–µ —Å–∫–∏–¥–∫–∏", callback_data="discount_reset"),
        InlineKeyboardButton("üìâ –°—Ç–∞—Ä—Ç —Å–∫–∏–¥–∫–∏", callback_data="discount_start"),
        InlineKeyboardButton("üî∞ –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

def get_reports_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="admin_reports_stop"),
        types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã", callback_data="admin_reports_go"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="admin_menu")
    )
    return keyboard

async def check_channel_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(
            chat_id=config['CHANNEL_ID'],
            user_id=user_id
        )
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False

from datetime import datetime, timedelta

@dp.callback_query_handler(lambda c: c.data == 'admin_discounts')
async def show_discount_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await bot.send_message(
        callback_query.from_user.id,
        "üßÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏",
        reply_markup=get_discounts_menu_keyboard()
    )
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'discount_reset')
async def discount_reset(callback_query: types.CallbackQuery):
    global CURRENT_DISCOUNT_PERCENT
    CURRENT_DISCOUNT_PERCENT = 0.0
    await bot.send_message(callback_query.from_user.id, "‚úÖ –í—Å–µ —Å–∫–∏–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'discount_start')
async def discount_start(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "üìâ –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.5):")
    await AdminStates.waiting_for_discount_percent.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_discount_percent)
async def set_discount_percent(message: types.Message, state: FSMContext):
    global CURRENT_DISCOUNT_PERCENT
    try:
        percent = float(message.text)
        if 0 <= percent <= 100:
            CURRENT_DISCOUNT_PERCENT = percent
            await message.answer(f"‚úÖ –°–∫–∏–¥–∫–∞ {percent:.1f}% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ –≤—Å–µ–º —Ç–∞—Ä–∏—Ñ–∞–º (–∫—Ä–æ–º–µ 1 –¥–Ω—è).")
        else:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.finish()


@dp.message_handler(commands=['send'])
async def broadcast_message(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = message.get_args()
    if not text:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send —Ç–µ–∫—Å—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏")
        return

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT user_id FROM users")
        user_ids = cursor.fetchall()
        sent_count = 0
        for user_id_tuple in user_ids:
            user_id = user_id_tuple[0]
            try:
                await bot.send_message(user_id, text)
                sent_count += 1
                await asyncio.sleep(0.05)  # —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å FloodWait
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

        await message.answer(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    finally:
        conn.close()


@dp.callback_query_handler(lambda c: c.data == "check_channel")
async def process_check_channel(callback_query: types.CallbackQuery):
    CHANNEL_ID = '-1002555772717'
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=callback_query.from_user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await callback_query.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ /start.")
        else:
            await callback_query.answer("‚ùó –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", show_alert=True)
    except:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == 'buy_channel_sub')
async def handle_buy_channel_sub(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    await bot.send_message(
        user_id,
        "üí• –ù–∞–≤—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –ø–∏—Ü—Ü—É –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤.\n"
        "üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: $.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url="https://pay.lava.ru/your_link")
        )
    )
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = message.from_user
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if is_in_blacklist(user.id):
        await message.answer(
            f"‚õî –í—ã –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞. –í–æ–ø—Ä–æ—Å—ã? @{config.get('admin_contact', 'teppupvp')}"
        )
        return

    CHANNEL_ID = '-1002641582538'  # ‚Üê —Å–≤–æ–π –∫–∞–Ω–∞–ª

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        if member.status not in ['member', 'administrator', 'creator']:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+WWshbrP-ZGA0ZTcx")
            )
            await message.answer(
                "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑.",
                reply_markup=markup
            )
            return
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        # üìå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        referrer_id = None
        if len(message.text.split()) > 1:
            ref_code = message.text.split()[1]
            if ref_code.startswith('ref_'):
                try:
                    referrer_id = int(ref_code.split('_')[1])
                    if referrer_id == user.id:
                        referrer_id = None
                except:
                    pass

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))
        existing_user = cursor.fetchone()

        if not existing_user:
            # üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            join_date = datetime.now().isoformat()
            cursor.execute('''
                INSERT INTO users 
                (user_id, username, join_date, referrer_id, is_bot) 
                VALUES (?, ?, ?, ?, ?)
            ''', (user.id, user.username, join_date, referrer_id, user.is_bot))
            conn.commit()

            # üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            try:
                ref_text = "–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"
                if referrer_id:
                    ref_text = f"—Ä–µ—Ñ–µ—Ä–∞–ª –æ—Ç: <code>{referrer_id}</code>"

                for admin_id in ADMIN_IDS:
                    await bot.send_message(
                        admin_id,
                        f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                        f"üë§ ID: <code>{user.id}</code>\n"
                        f"üìõ –ò–º—è: @{user.username}\n"
                        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {join_date}\n"
                        f"üë• –†–µ—Ñ–µ—Ä–∞–ª: {ref_text}",
                        parse_mode="HTML"
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")

            # üôã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if referrer_id:
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}!"
                    )
                except:
                    pass  # –≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —É–¥–∞–ª–∏–ª –±–æ—Ç–∞

        # üì∑ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        try:
            await message.answer_photo(
                photo=InputFile(config['menu_photo']),
                caption="<b>üëã | –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ FOBIO PIZZA! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                reply_markup=get_main_menu_keyboard(user_id=message.from_user.id),
                parse_mode="HTML"
            )
        except FileNotFoundError:
            await message.answer(
                "<b>üëã | –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ FOBIO PIZZA! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                reply_markup=get_main_menu_keyboard(user_id=message.from_user.id),
                parse_mode="HTML"
            )

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
    finally:
        conn.close()

@dp.callback_query_handler(lambda c: c.data == 'info')
async def show_info(callback_query: types.CallbackQuery):
    info_text = (
        "<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fobio ‚Äî –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã\n\n"
        "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "- üí£ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –Ω–∞ –∞–≥—Ä–µ—Å —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—á–∏–Ω–∫–∏ .\n"
        "- üí∞ –∫—É–ø–∏—Ç—å —à–æ–∫–æ–ª–∞–¥–∫–∏: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —à–æ–∫–æ–ª–∞–¥–æ–∫ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–∞ –∏–ª–∏ –∫–∞—Ä—Ç—É .\n"
        "- üéü –¥–æ—Å—Ç–∞–≤–∫–∞: –ü–æ–∫—É–ø–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º.\n"
        "- üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞: –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
        "- üë§ –ü—Ä–æ—Ñ–∏–ª—å: –ü—Ä–æ—Å–º–æ—Ç—Ä —à–æ–∫–æ–ª–∞–¥–æ–∫, —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
        "üîπ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?</b>\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏. –ö–æ–≥–¥–∞ 20 —á–µ–ª–æ–≤–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
        "üîπ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äî @teppupvp\n\n"
        "üöÄ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @piramonov"
        "üöÄ <b>—Ç—É—Ç–æ—Ä –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∏—Ü—Ü—É:</b> https://telegra.ph/Na-chto-otpravlyat-reporty-06-06 "
    )

    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=info_text,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ),
        parse_mode="HTML"
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'topup_start')
async def topup_method_selection(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", callback_data="topup_crypto"),
        InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ–π", callback_data="topup_card"),
        InlineKeyboardButton("üî∞ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'topup_crypto')
async def topup_crypto_handler(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ 999 USDT:")
    await PaymentStates.amount.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'topup_card')
async def topup_card_handler(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ: @piramonov",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="topup_start")
        )
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_payment(callback_query: types.CallbackQuery):
    invoice_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    async with AioCryptoPay(
        token=config['crypto_pay_token'],
        network=Networks.MAIN_NET
    ) as crypto:
        try:
            invoices = await crypto.get_invoices(invoice_ids=invoice_id)
            
            if not invoices:
                await bot.send_message(user_id, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            invoice = invoices[0]

            if invoice.status == "paid":
                conn = sqlite3.connect(DB_NAME)
                try:
                    cursor = conn.cursor()
                    cursor.execute('SELECT message_id, amount FROM payments WHERE invoice_id = ?', (invoice_id,))
                    message_id, amount = cursor.fetchone()

                    if message_id:
                        try:
                            await bot.delete_message(user_id, message_id)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

                    cursor.execute('''
                        UPDATE payments 
                        SET 
                            status = 'paid', 
                            updated_at = ?
                        WHERE invoice_id = ?
                    ''', (datetime.now().isoformat(), invoice_id))

                    cursor.execute('''
                        UPDATE users 
                        SET balance = balance + ? 
                        WHERE user_id = ?
                    ''', (amount, user_id))
                    conn.commit()

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
                    try:
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=InputFile(config['menu_photo']),  # –ü—É—Ç—å –∫ main.jpg
                            caption=f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USDT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
                            reply_markup=get_main_menu_keyboard()
                        )
                    except FileNotFoundError:
                        await bot.send_message(
                            user_id,
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount} USDT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
                            reply_markup=get_main_menu_keyboard()
                        )

                except sqlite3.Error as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
                    await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                finally:
                    conn.close()

            else:
                await bot.send_message(
                    user_id,
                    "‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                )

        except Exception as e:
            logging.error(f"Check payment error: {str(e)}", exc_info=True)
            await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

    await bot.answer_callback_query(callback_query.id)


async def create_payment(user_id: int, amount: float):
    async with AioCryptoPay(
        token=config['crypto_pay_token'],
        network=Networks.MAIN_NET
    ) as crypto:
        try:
            invoice = await crypto.create_invoice(asset='USDT', amount=round(amount, 2))
            message = await bot.send_message( 
                user_id,
                f"üí∏ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {invoice.bot_invoice_url}",
                reply_markup=payment_check_keyboard(invoice.invoice_id)
            )
            
            await save_payment_to_db(
                invoice_id=invoice.invoice_id,
                user_id=user_id,
                amount=amount,
                message_id=message.message_id 
            )
            
        except Exception as e:
            logging.error(f"Payment error: {str(e)}")
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")



@dp.message_handler(state=PaymentStates.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if 1 <= amount <= 999:
            await state.update_data(amount=amount)
            await PaymentStates.confirm_payment.set()
            await message.answer(
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} USDT",
                reply_markup=confirm_keyboard()  
            )
        else:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 999 USDT!")
            await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'confirm', state=PaymentStates.confirm_payment)
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await create_payment(callback_query.from_user.id, data['amount'])
    await state.finish()
    await bot.answer_callback_query(callback_query.id, "‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!")

def payment_check_keyboard(invoice_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")
    )





@dp.callback_query_handler(lambda c: c.data == 'profile')
async def show_profile(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        SELECT join_date, subscription_end, balance 
        FROM users 
        WHERE user_id = ?
    ''', (user_id,))
    user_data = cursor.fetchone()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    cursor.execute('''
        SELECT 1 
        FROM whitelist 
        WHERE user_id = ?
    ''', (user_id,))
    in_whitelist = "ü™¨ –î–∞" if cursor.fetchone() else "‚úñÔ∏è –ù–µ—Ç"
    
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    if user_data:
        join_date = datetime.fromisoformat(user_data[0]).strftime("%d.%m.%Y %H:%M")
        subscription_status = (
            "ü™¨ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ " + datetime.fromisoformat(user_data[1]).strftime("%d.%m.%Y %H:%M")
            if user_data[1] and datetime.now() < datetime.fromisoformat(user_data[1])
            else "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        )
        balance = f"{user_data[2]:.2f}$" if user_data[2] else "0.00$"


        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT channel_subscription FROM users WHERE user_id = ?", (user_id,))
        ch_sub = cursor.fetchone()
        conn.close()

        channel_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if ch_sub and ch_sub[0] else "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        
        profile_text = (
            f"üë§ <b>| –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî <b>| ID</b>: <code>{user_id}</code>\n"
            f"üìÖ <b>| –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>: <code>{join_date}</code>\n"
            f"üõ°Ô∏è <b>| –í–∞–π—Ç–ª–∏—Å—Ç</b>: <code>{in_whitelist}</code>\n"
            f"üíé <b>| –î–æ—Å—Ç–∞–≤–∫–∞</b>: <code>{subscription_status}</code>\n"
            f"üí∏ <b>| —à–æ–∫–æ–ª–∞–¥–∫–∏</b>: <code>{balance}</code>"
            f"üì£ <b>| –∑–∞–∫–∞–∑—ã –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>: <code>{channel_status}</code>\n"
        )
    else:
        profile_text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, /start –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    try:
        photo = InputFile(config['profile_photo'])
        await bot.send_photo(
            chat_id=callback_query.message.chat.id,
            photo=photo,
            caption=profile_text,
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
    except FileNotFoundError:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=profile_text,
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

def get_profile_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üõí | –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", callback_data="buy_subscription"),
        types.InlineKeyboardButton("üî∞ | –ù–∞–∑–∞–¥ ", callback_data="back_to_menu")
    )
    return keyboard

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def back_to_menu(callback_query: types.CallbackQuery):
    try:
        photo = InputFile(config['menu_photo'])
        await bot.send_photo(
            chat_id=callback_query.message.chat.id,
            photo=photo,
            caption="<b>üöÄ | –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FOBIO PIZZA</b>",
            reply_markup=get_main_menu_keyboard(user_id=callback_query.from_user.id),
            parse_mode="HTML"
        )
    except FileNotFoundError:
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

@dp.callback_query_handler(lambda c: c.data == 'buy_subscription')
async def show_subscription_plans(callback_query: types.CallbackQuery):
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=get_subscription_plans_keyboard()
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data.startswith('sub_'))
async def process_subscription_purchase(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    plan_type = callback_query.data.split('_')[1]
    
    PRICES = {
        '1': {'days': 1, 'price': 2},
        '7': {'days': 7, 'price': 5},
        '30': {'days': 30, 'price': 9},
        'lifetime': {'days': 36500, 'price': 20},
        'channel': {'days': 36500, 'price': 3}
    }

    user = get_user(user_id)
    if not user:
        await bot.answer_callback_query(callback_query.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è")
        return

    plan = PRICES.get(plan_type)
    if not plan:
        await bot.answer_callback_query(callback_query.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        return

    # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É (–∫—Ä–æ–º–µ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –¥–µ–Ω—å)
    global CURRENT_DISCOUNT_PERCENT
    if plan_type != '1' and CURRENT_DISCOUNT_PERCENT > 0:
        discount = plan['price'] * (CURRENT_DISCOUNT_PERCENT / 100)
        plan['price'] -= discount
        plan['price'] = round(plan['price'], 2)

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if float(user[5]) < plan['price']:
        await bot.answer_callback_query(
            callback_query.id,
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {plan['price']}$",
            show_alert=True
        )
        return

    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()

        if plan_type == 'channel':
            cursor.execute('''
                UPDATE users 
                SET 
                    channel_subscription = 1,
                    balance = balance - ?
                WHERE user_id = ?
            ''', (plan['price'], user_id))
            conn.commit()

            await bot.send_message(
                user_id,
                f"‚úÖ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ –∫–∞–Ω–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞!\n"
                f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {plan['price']}$",
                reply_markup=get_main_menu_keyboard()
            )

        else:
            new_end = datetime.now()
            if user[2]: 
                current_end = datetime.fromisoformat(user[2])
                if current_end > datetime.now():
                    new_end = current_end

            new_end += timedelta(days=plan['days'])

            cursor.execute('''
                UPDATE users 
                SET 
                    subscription_end = ?,
                    balance = balance - ?
                WHERE user_id = ?
            ''', (new_end.isoformat(), plan['price'], user_id))
            conn.commit()

            await bot.send_photo(
                chat_id=user_id,
                photo=InputFile(config['menu_photo']),
                caption=(
                    f"‚úÖ –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {new_end.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {plan['price']}$"
                ),
                reply_markup=get_main_menu_keyboard()
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ({plan_type}): {str(e)}")
        await bot.answer_callback_query(callback_query.id, "‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    finally:
        conn.close()

    await bot.answer_callback_query(callback_query.id)

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS



@dp.callback_query_handler(lambda c: c.data == 'cn0c')
async def cn0c_start(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä: —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –∫–∞–Ω–∞–ª
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë§ –ß–µ–ª–æ–≤–µ–∫", callback_data="cn0c_person"),
        InlineKeyboardButton("üì£ –ö–∞–Ω–∞–ª", callback_data="cn0c_channel")
    )
    await bot.send_message(
        user_id,
        "<b>üí• –∑–∞–∫–∞–∑: –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É:</b>",
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'referral')
async def handle_referral(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT valid_referrals, referral_cycles 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    row = cursor.fetchone()
    conn.close()

    valid = row[0] if row else 0
    cycles = row[1] if row else 0

    await bot.send_message(
        user_id,
        f"<b>üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{referral_link}</code>\n\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{valid}/20</b>\n"
        f"üîÅ –ë–æ–Ω—É—Å–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <b>{cycles}</b>\n\n"
        f"üìå –ó–∞ –∫–∞–∂–¥—ã–µ 20 –¥—Ä—É–∑–µ–π ‚Äî +1 –¥–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("üî∞ –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        )
    )
    await bot.answer_callback_query(callback_query.id)

def get_reason_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üö´ –ø–∏—Ü—Ü–∞ —Å–æ –°–ø–∞–º–æ–º", callback_data="reason_spam"),
        InlineKeyboardButton("üëä –ø–∏—Ü—Ü–∞ —Å –ù–∞—Å–∏–ª.", callback_data="reason_violence"),
        InlineKeyboardButton("üîû –ø–∏—Ü—Ü–∞ —Å 18+", callback_data="reason_pornography"),
        InlineKeyboardButton("üîí –ø–∏—Ü—Ü–∞ —Å –õ–∏—á–Ω—ã–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏", callback_data="reason_private_data"),
        InlineKeyboardButton("üí£ –ø–∏—Ü—Ü–∞ —Å –¢–µ—Ä—Ä–æ—Ä.", callback_data="reason_terrorism"),
        InlineKeyboardButton("üë∂ –ø–∏—Ü—Ü–∞ —Å –¶–ü", callback_data="reason_child_abuse")
    )
    return keyboard

@dp.message_handler(state=ReportStates.waiting_for_link, content_types=types.ContentTypes.TEXT)
async def handle_link(message: types.Message, state: FSMContext):
    chatlink = message.text.strip()
    if not chatlink.startswith("https://t.me/"):
        await message.answer("‚ô¶Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞.")
        return

    parts = chatlink.split("/")
    if len(parts) < 5:
        await message.answer("‚ô¶Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞.")
        return

    chat_id = parts[3]
    try:
        msg_id = int(parts[4])
    except ValueError:
        await message.answer("‚ô¶Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(chat_id=chat_id, msg_id=msg_id, link=chatlink)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã
    await message.answer("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫–∞–∑–∞:", reply_markup=get_reason_keyboard())
    await ReportStates.waiting_for_reason.set()

@dp.callback_query_handler(lambda c: c.data.startswith('reason_'), state=ReportStates.waiting_for_reason)
async def handle_reason_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with send_reports_lock:
        if not is_reporting_enabled():
            await callback_query.message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            await state.finish()
            await bot.answer_callback_query(callback_query.id)
            return

        reason_type = callback_query.data[len("reason_"):]
        user_data = await state.get_data()
        chat_id = user_data['chat_id']
        msg_id = user_data['msg_id']
        chatlink = user_data['link']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã
        reason_mapping = {
            'spam': {
                'class': InputReportReasonSpam(),
                'text': "This account is sending spam messages. Please take action against this spammer."
            },
            'violence': {
                'class': InputReportReasonViolence(),
                'text': "This content promotes violence and dangerous behavior. It should be removed immediately."
            },
            'pornography': {
                'class': InputReportReasonPornography(),
                'text': "This message contains explicit pornographic content which is inappropriate and against community rules."
            },
            'private_data': {
                'class': InputReportReasonOther(),
                'text': "This message contains private personal information that's being shared without consent. This is doxxing."
            },
            'terrorism': {
                'class': InputReportReasonOther(),
                'text': "This content promotes terrorism or extremist activities. It should be removed as it threatens public safety."
            },
            'child_abuse': {
                'class': InputReportReasonChildAbuse(),
                'text': "This content appears to contain child sexual abuse material. Please remove it and investigate this account."
            }
        }

        reason_data = reason_mapping.get(reason_type)
        if not reason_data:
            await callback_query.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–∫–∞–∑–∞.")
            await state.finish()
            await bot.answer_callback_query(callback_query.id)
            return

        reason_class = reason_data['class']
        report_text = reason_data['text']
        reason_display_name = reason_type.replace('_', ' ').title()

        api_id = config.get("API_ID")
        api_hash = config.get("API_HASH")
        if not api_id or not api_hash:
            await callback_query.message.answer("üî∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json.")
            await state.finish()
            await bot.answer_callback_query(callback_query.id)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
        session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Å—Å–∏—é –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        if 'temp_checker.session' in session_files:
            session_files.remove('temp_checker.session')
        session_files.insert(0, 'temp_checker.session')
        
        sender_id = None
        session_used = None
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–µ—Å—Å–∏–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Ä–∞–±–æ—Ç–∞—é—â—É—é
        for session_file in session_files:
            session_name = session_file[:-8]  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .session
            
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                async with TelegramClient(f'sessions/{session_name}', api_id, api_hash, connection_retries=0) as client:
                    try:
                        message_data = await client.get_messages(chat_id, ids=msg_id)
                        if message_data and message_data.sender_id:
                            sender_id = message_data.sender_id
                            session_used = session_file
                            log_to_file(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session_file}: {sender_id}")
                            break
                    except Exception as e:
                        log_to_file(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session_file}: {e}")
                        continue
            except Exception as e:
                log_to_file(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ {session_file}: {e}")
                continue
        
        if not sender_id:
            await callback_query.message.answer("‚ô¶Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.")
            await state.finish()
            await bot.answer_callback_query(callback_query.id)
            return

        if is_in_whitelist(sender_id):
            await callback_query.message.answer("‚ô¶Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ whitelist.")
            await state.finish()
            await bot.answer_callback_query(callback_query.id)
            return

        complainant_id = callback_query.from_user.id

        done = 0
        err = 0
        invalid_sessions = []

        session_files = [f for f in os.listdir('sessions') if f.endswith('.session')]

        async def report_from_session(session_file):
            nonlocal done, err, invalid_sessions
            session_path = f'sessions/{session_file}'

            if not os.path.exists(session_path):
                log_to_file(f"‚ùå {session_file}: —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            try:
                session = SQLiteSession(session_path)
                async with TelegramClient(session, api_id, api_hash, connection_retries=0) as client:
                    try:
                        if not await client.is_user_authorized():
                            log_to_file(f"‚ùå {session_file}: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
                            invalid_sessions.append(session_file)
                            return
                    except PhoneNumberInvalidError:
                        log_to_file(f"‚ùå {session_file}: –±–∏—Ç–∞—è —Å–µ—Å—Å–∏—è, –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
                        invalid_sessions.append(session_file)
                        return
                    except SessionPasswordNeededError:
                        log_to_file(f"‚ùå {session_file}: —Å–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç 2FA –ø–∞—Ä–æ–ª—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        invalid_sessions.append(session_file)
                        return
                    except Exception as e:
                        log_to_file(f"‚ùå {session_file}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                        invalid_sessions.append(session_file)
                        return

                    try:
                        peer = await client.get_input_entity(chat_id)
                        await client(functions.messages.ReportRequest(
                            peer=peer,
                            id=[msg_id],
                            reason=reason_class,
                            message=report_text
                        ))
                        done += 1
                    except Exception as e:
                        log_to_file(f"‚ùå {session_file}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}")
                        err += 1

            except Exception as e:
                log_to_file(f"‚ùå {session_file}: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                err += 1

        await asyncio.gather(*(report_from_session(f) for f in session_files))

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        reason_ru_names = {
            'spam': '–ø–∏—Ü—Ü–∞ —Å–æ —Å–ø–∞–º–æ–º',
            'violence': '–ø–∏—Ü—Ü–∞ —Å –Ω–∞—Å–∏–ª.',
            'pornography': '–ø–∏—Ü–∞ —Å –ø—Ä–æ–Ω–æ',
            'private_data': '–ø–∏—Ü—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏',
            'terrorism': '–ø–∏—Ü—Ü–∞ —Å —Ç–µ—Ä—Ä–æ',
            'child_abuse': '–ø–∏—Ü—Ü–∞ —Å –¥–ø'
        }
        reason_display = reason_ru_names.get(reason_type, reason_type.upper())

        log_entry = (
            f"[ ‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ ]\n"
            f"üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{complainant_id}</code>\n"
            f"üîó –°—Å—ã–ª–∫–∞: {chatlink}\n"
            f"üéØ –¶–µ–ª—å (sender_id): <code>{sender_id}</code>\n"
            f"üó£ –ü—Ä–∏—á–∏–Ω–∞: {reason_display}\n"
            f"üìù –¢–µ–∫—Å—Ç: {report_text}\n"
            f"üìä –ò—Ç–æ–≥–∏: –£—Å–ø–µ—à–Ω–æ: {done} | –û—à–∏–±–∫–∏: {err}\n"
        )

        log_to_file(log_entry)
        await bot.send_message(LOG_CHANNEL_ID, log_entry, parse_mode="HTML")

        await callback_query.message.answer(
            f"[ ‚úîÔ∏è ] –ø–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n\n"
            f"üó£ –Ω–∞—á–∏–Ω–∫–∞: {reason_display}\n"
            f"üî± –£—Å–ø–µ—à–Ω–æ: {done}\n"
            f"‚úñÔ∏è –û—à–∏–±–∫–∏: {err}"
        )

        try:
            photo = InputFile(image_path)
            await callback_query.message.answer_photo(
                photo,
                caption="üöÄ <b>| –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é FOBIO PIZZA</b>",
                reply_markup=get_main_menu_keyboard(user_id=callback_query.from_user.id),
                parse_mode="HTML"
            )
        except Exception:
            await callback_query.message.answer(
                "‚ö° –ø–∏—Ü—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(user_id=callback_query.from_user.id)
            )

        await state.finish()
        await bot.answer_callback_query(callback_query.id)

@dp.message_handler(commands=["s"])
async def cmd_user_info(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.reply("–§–æ—Ä–º–∞—Ç: /s [user_id]")
            return
        user_id = int(parts[1])
    except Exception:
        await message.reply("–§–æ—Ä–º–∞—Ç: /s [user_id]")
        return

    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT join_date, balance, subscription_end FROM users WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        if not row:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        join_date, balance, subscription_end = row
        balance_str = f"{balance:.2f}$" if balance is not None else "0.00$"
        if subscription_end:
            try:
                sub_end_dt = datetime.fromisoformat(subscription_end)
                if datetime.now() < sub_end_dt:
                    sub_status = f"ü™¨ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub_end_dt.strftime('%d.%m.%Y %H:%M')}"
                else:
                    sub_status = "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ (–∏—Å—Ç–µ–∫–ª–∞)"
            except Exception:
                sub_status = f"‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã: {subscription_end})"
        else:
            sub_status = "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
        cursor.execute('SELECT 1 FROM whitelist WHERE user_id = ?', (user_id,))
        in_whitelist = "ü™¨ –î–∞" if cursor.fetchone() else "‚úñÔ∏è –ù–µ—Ç"
        # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if join_date:
            try:
                join_date_str = datetime.fromisoformat(join_date).strftime("%d.%m.%Y %H:%M")
            except Exception:
                join_date_str = join_date
        else:
            join_date_str = "-"
        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}</b>\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{join_date_str}</code>\n"
            f"üõ°Ô∏è –í–∞–π—Ç–ª–∏—Å—Ç: <code>{in_whitelist}</code>\n"
            f"üíé –î–æ—Å—Ç–∞–≤–∫–∞: <code>{sub_status}</code>\n"
            f"üí∏ –®–æ–∫–æ–ª–∞–¥–∫–∏: <code>{balance_str}</code>"
        )
        await message.reply(text, parse_mode="HTML")
    finally:
        conn.close()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ß–µ–ª–æ–≤–µ–∫¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query_handler(lambda c: c.data == 'cn0c_person')
async def cn0c_person_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
    if not check_subscription(user_id):
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!",
            show_alert=True
        )
        await bot.send_message(
            user_id,
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_profile_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state, —á—Ç–æ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç ¬´–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞¬ª
    await state.update_data(report_type='person')

    # –ü—Ä–æ—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(
        user_id,
        "<b>‚òÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n",
        parse_mode="HTML"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await ReportStates.waiting_for_link.set()

    # –£–±–∏—Ä–∞–µ–º ¬´–∫—Ä—É—Ç–∏–ª–∫—É¬ª –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    await bot.answer_callback_query(callback_query.id)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª ¬´–ö–∞–Ω–∞–ª¬ª
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query_handler(lambda c: c.data == 'cn0c_channel')
async def cn0c_channel_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    if not check_channel_subscription_db(user_id):
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É –∫–∞–Ω–∞–ª–æ–≤.",
            show_alert=True
        )
        await bot.send_message(
            user_id,
            "üîí –ß—Ç–æ–±—ã –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã, –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=get_subscription_plans_keyboard()  # üîÑ –∑–∞–º–µ–Ω–∏–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        )
        return

    await state.update_data(report_type='channel')
    await bot.send_message(
        user_id,
        "<b>‚òÇÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞–Ω–∞–ª:</b>\n",
        parse_mode="HTML"
    )
    await ReportStates.waiting_for_link.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'promo_activate')
async def activate_promo_start(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
    )
    await PromoStates.waiting_for_code.set()
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=PromoStates.waiting_for_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        cursor.execute('SELECT days, used_by FROM promo_codes WHERE code = ?', (promo_code,))
        promo = cursor.fetchone()
        
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()
            conn.close()
            return
        
        days, used_by = promo
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if used_by:
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            await state.finish()
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        cursor.execute('''
            UPDATE promo_codes 
            SET used_by = ?, used_at = ? 
            WHERE code = ?
        ''', (user_id, datetime.now().isoformat(), promo_code))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        cursor.execute('SELECT subscription_end FROM users WHERE user_id = ?', (user_id,))
        current_sub = cursor.fetchone()
        
        if current_sub and current_sub[0]:
            current_end = datetime.fromisoformat(current_sub[0])
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
            if current_end > datetime.now():
                new_end = current_end + timedelta(days=days)
            else:
                new_end = datetime.now() + timedelta(days=days)
        else:
            new_end = datetime.now() + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        cursor.execute('''
            UPDATE users 
            SET subscription_end = ? 
            WHERE user_id = ?
        ''', (new_end.isoformat(), user_id))
        
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.\n"
            f"üìÜ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code} –Ω–∞ {days} –¥–Ω–µ–π!"
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
    finally:
        conn.close()
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'admin_menu')
async def show_admin_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üîß –ê–¥–º–∏–Ω –º–µ–Ω—é</b>",
        reply_markup=get_admin_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_subscriptions')
async def show_subscriptions_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>",
        reply_markup=get_subscriptions_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_balance')
async def show_balance_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>",
        reply_markup=get_balance_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_wl_bl')
async def show_wl_bl_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üìã Whitelist/Blacklist</b>",
        reply_markup=get_wl_bl_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_broadcast')
async def show_broadcast_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞</b>",
        reply_markup=get_broadcast_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_reports')
async def show_reports_menu(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text="<b>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞–º–∏</b>",
        reply_markup=get_reports_menu_keyboard(),
        parse_mode="HTML"
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_sub_grant')
async def admin_sub_grant(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="üìÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    await AdminStates.waiting_for_sub_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_sub_user_id)
async def process_sub_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:")
        await AdminStates.waiting_for_sub_days.set()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.message_handler(state=AdminStates.waiting_for_sub_days)
async def process_sub_days(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            await state.finish()
            return
        
        data = await state.get_data()
        user_id = data['user_id']
        
        subscription_end = (datetime.now() + timedelta(days=days)).isoformat()
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE users 
                SET subscription_end = ? 
                WHERE user_id = ?
            ''', (subscription_end, user_id))
            conn.commit()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            conn.close()
        
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_sub_revoke')
async def admin_sub_revoke(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏:"
    )
    await AdminStates.waiting_for_unsub_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_unsub_user_id)
async def process_unsub_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        update_subscription(user_id, None)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_sub_list')
async def admin_sub_list(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    filename = None
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, subscription_end 
            FROM users 
            WHERE subscription_end IS NOT NULL
            ORDER BY subscription_end DESC
        ''')
        users = cursor.fetchall()

        with tempfile.NamedTemporaryFile(
            mode='w+', 
            suffix='.txt', 
            delete=False, 
            encoding='utf-8'
        ) as tmp_file:
            filename = tmp_file.name
            tmp_file.write("üìÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n")
            tmp_file.write(f"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
            tmp_file.write("="*40 + "\n")
            
            if not users:
                tmp_file.write("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
            else:
                for user in users:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if datetime.now() < datetime.fromisoformat(user[1]) else "‚ùå –ò—Å—Ç–µ–∫–ª–∞"
                    end_date = datetime.fromisoformat(user[1]).strftime('%d.%m.%Y %H:%M')
                    tmp_file.write(
                        f"üë§ User ID: {user[0]}\n"
                        f"–°—Ç–∞—Ç—É—Å: {status}\n"
                        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
                        f"{'-'*30}\n"
                    )

        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id=callback_query.from_user.id,
                document=file,
                caption="üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫",
                reply_markup=get_subscriptions_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_subscriptions_menu_keyboard()
        )
    finally:
        conn.close()
        if filename and os.path.exists(filename):
            os.unlink(filename)
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_promo_create')
async def admin_promo_create(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:"
    )
    await AdminStates.waiting_for_promo_days.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_promo_days)
async def process_promo_days(message: types.Message, state: FSMContext):
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            await state.finish()
            return
        
        code = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        created_at = datetime.now().isoformat()
        
        cursor.execute('''
            INSERT INTO promo_codes 
            (code, days, created_by, created_at) 
            VALUES (?, ?, ?, ?)
        ''', (code, days, message.from_user.id, created_at))
        
        conn.commit()
        conn.close()
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìã –ö–æ–¥: <code>{code}</code>\n"
            f"üìÖ –î–Ω–µ–π: {days}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            parse_mode="HTML",
            reply_markup=get_subscriptions_menu_keyboard()
        )
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
    finally:
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_promo_list')
async def admin_promo_list(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT code, days, created_at, used_by, used_at 
            FROM promo_codes 
            ORDER BY created_at DESC
        ''')
        promos = cursor.fetchall()
        
        if not promos:
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="üìã –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_subscriptions_menu_keyboard()
            )
            return
        
        with tempfile.NamedTemporaryFile(
            mode='w+', 
            suffix='.txt', 
            delete=False, 
            encoding='utf-8'
        ) as tmp_file:
            filename = tmp_file.name
            tmp_file.write("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n")
            tmp_file.write(f"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
            tmp_file.write("="*40 + "\n\n")
            
            for promo in promos:
                code, days, created_at, used_by, used_at = promo
                status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if used_by else "‚è≥ –ê–∫—Ç–∏–≤–µ–Ω"
                created_date = datetime.fromisoformat(created_at).strftime('%d.%m.%Y %H:%M')
                
                tmp_file.write(f"–ö–æ–¥: {code}\n")
                tmp_file.write(f"–î–Ω–µ–π: {days}\n")
                tmp_file.write(f"–°–æ–∑–¥–∞–Ω: {created_date}\n")
                tmp_file.write(f"–°—Ç–∞—Ç—É—Å: {status}\n")
                
                if used_by:
                    used_date = datetime.fromisoformat(used_at).strftime('%d.%m.%Y %H:%M')
                    tmp_file.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {used_by}\n")
                    tmp_file.write(f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {used_date}\n")
                
                tmp_file.write("-"*30 + "\n\n")
        
        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id=callback_query.from_user.id,
                document=file,
                caption="üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                reply_markup=get_subscriptions_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.",
            reply_markup=get_subscriptions_menu_keyboard()
        )
    finally:
        conn.close()
        if filename and os.path.exists(filename):
            os.unlink(filename)
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_balance_add')
async def admin_balance_add(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ûï –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
    )
    await AdminStates.waiting_for_balance_user_id.set()
    await state.update_data(action='add')
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_balance_sub')
async def admin_balance_sub(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:"
    )
    await AdminStates.waiting_for_balance_user_id.set()
    await state.update_data(action='sub')
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_balance_user_id)
async def process_balance_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
        await AdminStates.waiting_for_balance_amount.set()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.message_handler(state=AdminStates.waiting_for_balance_amount)
async def process_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            await state.finish()
            return
        
        data = await state.get_data()
        user_id = data['user_id']
        action = data['action']
        
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            if action == 'add':
                cursor.execute('''
                    UPDATE users 
                    SET balance = round(balance + ?, 2)
                    WHERE user_id = ?
                ''', (amount, user_id))
                await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount}$.")
            else:
                cursor.execute('''
                    UPDATE users 
                    SET balance = round(balance - ?, 2)
                    WHERE user_id = ?
                ''', (amount, user_id))
                await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}$.")
            conn.commit()
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            conn.close()
        
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_balance_list')
async def admin_balance_list(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    filename = None
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, balance 
            FROM users 
            WHERE balance > 0
            ORDER BY balance DESC
        ''')
        users = cursor.fetchall()

        with tempfile.NamedTemporaryFile(
            mode='w+', 
            suffix='.txt', 
            delete=False, 
            encoding='utf-8'  
        ) as tmp_file:
            filename = tmp_file.name
            tmp_file.write("üí∞ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤\n")
            tmp_file.write(f"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
            tmp_file.write("="*40 + "\n")
            
            if not users:
                tmp_file.write("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º\n")
            else:
                for user in users:
                    tmp_file.write(
                        f"üë§ User ID: {user[0]}\n"
                        f"–ë–∞–ª–∞–Ω—Å: {user[1]:.2f}$\n"
                        f"{'-'*30}\n"
                    )

        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id=callback_query.from_user.id,
                document=file,
                caption="üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–æ–≤",
                reply_markup=get_balance_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞",
            reply_markup=get_balance_menu_keyboard()
        )
    finally:
        conn.close()
        if filename and os.path.exists(filename):
            os.unlink(filename)
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_wl_add')
async def admin_wl_add(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ûï –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ whitelist:"
    )
    await AdminStates.waiting_for_wl_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_wl_user_id)
async def process_wl_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO whitelist 
                (user_id, added_by, added_at)
                VALUES (?, ?, ?)
            ''', (user_id, message.from_user.id, datetime.now().isoformat()))
            conn.commit()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫.", reply_markup=get_wl_bl_menu_keyboard())
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            conn.close()
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_wl_remove')
async def admin_wl_remove(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ whitelist:"
    )
    await AdminStates.waiting_for_remove_wl_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_remove_wl_user_id)
async def process_remove_wl_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM whitelist WHERE user_id = ?', (user_id,))
            conn.commit()
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=get_wl_bl_menu_keyboard())
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            conn.close()
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_bl_add')
async def admin_bl_add(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚õî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ blacklist:"
    )
    await AdminStates.waiting_for_bl_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_bl_user_id)
async def process_bl_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        if user_id in ADMIN_IDS:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
            await state.finish()
            return
        await state.update_data(user_id=user_id)
        await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ blacklist (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await AdminStates.waiting_for_bl_reason.set()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.message_handler(state=AdminStates.waiting_for_bl_reason)
async def process_bl_reason(message: types.Message, state: FSMContext):
    reason = message.text.strip() if message.text.strip() != '-' else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    data = await state.get_data()
    user_id = data['user_id']
    
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO blacklist 
            (user_id, added_by, reason, added_at) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, message.from_user.id, reason, datetime.now().isoformat()))
        conn.commit()
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
            reply_markup=get_wl_bl_menu_keyboard()
        )
        
        try:
            admin_contact = config.get('admin_contact', 'teppupvp')
            await bot.send_message(
                user_id,
                f"‚õî –í—ã –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞. –í–æ–ø—Ä–æ—Å—ã? @{admin_contact}"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_bl_remove')
async def admin_bl_remove(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ blacklist:"
    )
    await AdminStates.waiting_for_unbl_user_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_unbl_user_id)
async def process_unbl_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM blacklist WHERE user_id = ?', (user_id,))
            if not cursor.fetchone():
                await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")
                conn.close()
                await state.finish()
                return
            
            cursor.execute('DELETE FROM blacklist WHERE user_id = ?', (user_id,))
            conn.commit()
            
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=get_wl_bl_menu_keyboard())
            
            try:
                await bot.send_message(
                    user_id,
                    "‚úÖ –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞."
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            conn.close()
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_bl_list')
async def admin_bl_list(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            SELECT blacklist.user_id, reason, added_at, username 
            FROM blacklist 
            LEFT JOIN users ON blacklist.user_id = users.user_id 
            ORDER BY added_at DESC
        ''')
        blacklisted = cursor.fetchall()
        
        if not blacklisted:
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="üìã –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.",
                reply_markup=get_wl_bl_menu_keyboard()
            )
            return
        
        with tempfile.NamedTemporaryFile(
            mode='w+', 
            suffix='.txt', 
            delete=False, 
            encoding='utf-8'
        ) as tmp_file:
            filename = tmp_file.name
            tmp_file.write("‚õî –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n")
            tmp_file.write(f"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")
            tmp_file.write("="*40 + "\n\n")
            
            for user in blacklisted:
                user_id, reason, added_at, username = user
                added_date = datetime.fromisoformat(added_at).strftime('%d.%m.%Y %H:%M')
                
                tmp_file.write(f"ID: {user_id}\n")
                if username:
                    tmp_file.write(f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n")
                tmp_file.write(f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n")
                tmp_file.write(f"–î–æ–±–∞–≤–ª–µ–Ω: {added_date}\n")
                tmp_file.write("-"*30 + "\n\n")
        
        with open(filename, 'rb') as file:
            await bot.send_document(
                chat_id=callback_query.from_user.id,
                document=file,
                caption="üìä –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=get_wl_bl_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {str(e)}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
            reply_markup=get_wl_bl_menu_keyboard()
        )
    finally:
        conn.close()
        if filename and os.path.exists(filename):
            os.unlink(filename)
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_broadcast_send')
async def admin_broadcast_send(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    await AdminStates.waiting_for_broadcast_message.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        await state.finish()
        return
    
    conn = sqlite3.connect(DB_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        user_ids = cursor.fetchall()
        sent_count = 0
        for user_id_tuple in user_ids:
            user_id = user_id_tuple[0]
            try:
                await bot.send_message(user_id, text)
                sent_count += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

        await message.answer(
            f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π.",
            reply_markup=get_broadcast_menu_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")
    finally:
        conn.close()
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin_test_log')
async def admin_test_log(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        await bot.send_message(
            chat_id=LOG_CHANNEL_ID,
            text="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–≥—Ä—É–ø–ø—É!"
        )
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_broadcast_menu_keyboard()
        )
    except Exception as e:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_broadcast_menu_keyboard()
        )
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_debug_group')
async def admin_debug_group(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    try:
        group_id = int(config["LOG_CHANNEL_ID"])
        chat = await bot.get_chat(group_id)
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"""
üß∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:
ID: {chat.id}
–¢–∏–ø: {chat.type}
–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
–ü—Ä–∞–≤–∞ –±–æ—Ç–∞: {chat.permissions.can_send_messages}
            """,
            reply_markup=get_broadcast_menu_keyboard()
        )
    except Exception as e:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_broadcast_menu_keyboard()
        )
    
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_reports_stop')
async def admin_reports_stop(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    set_reporting_enabled(False)
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
        reply_markup=get_reports_menu_keyboard()
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_reports_go')
async def admin_reports_go(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    set_reporting_enabled(True)
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Ü—Ü—ã –≤–∫–ª—é—á–µ–Ω–∞.",
        reply_markup=get_reports_menu_keyboard()
    )
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(lambda c: c.data == 'admin_user_info')
async def admin_user_info(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    
    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="üìÑ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
    )
    await AdminStates.waiting_for_user_info_id.set()
    await bot.delete_message(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(state=AdminStates.waiting_for_user_info_id)
async def process_user_info_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        conn = sqlite3.connect(DB_NAME)
        try:
            cursor = conn.cursor()
            cursor.execute('SELECT join_date, balance, subscription_end FROM users WHERE user_id = ?', (user_id,))
            row = cursor.fetchone()
            if not row:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.finish()
                return
            
            join_date, balance, subscription_end = row
            balance_str = f"{balance:.2f}$" if balance is not None else "0.00$"
            if subscription_end:
                try:
                    sub_end_dt = datetime.fromisoformat(subscription_end)
                    if datetime.now() < sub_end_dt:
                        sub_status = f"ü™¨ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub_end_dt.strftime('%d.%m.%Y %H:%M')}"
                    else:
                        sub_status = "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ (–∏—Å—Ç–µ–∫–ª–∞)"
                except Exception:
                    sub_status = f"‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã: {subscription_end})"
            else:
                sub_status = "‚úñÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            
            cursor.execute('SELECT 1 FROM whitelist WHERE user_id = ?', (user_id,))
            in_whitelist = "ü™¨ –î–∞" if cursor.fetchone() else "‚úñÔ∏è –ù–µ—Ç"
            
            if join_date:
                try:
                    join_date_str = datetime.fromisoformat(join_date).strftime("%d.%m.%Y %H:%M")
                except Exception:
                    join_date_str = join_date
            else:
                join_date_str = "-"
            
            text = (
                f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}</b>\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>{join_date_str}</code>\n"
                f"üõ°Ô∏è –í–∞–π—Ç–ª–∏—Å—Ç: <code>{in_whitelist}</code>\n"
                f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: <code>{sub_status}</code>\n"
                f"üí∏ —à–æ–∫–æ–ª–∞–¥–∫–∏: <code>{balance_str}</code>"
            )
            await message.answer(text, parse_mode="HTML", reply_markup=get_admin_menu_keyboard())
        finally:
            conn.close()
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        await state.finish()
          

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö callback_query
@dp.callback_query_handler(lambda c: True, state="*")
async def process_callback_blacklist_check(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if is_in_blacklist(user_id):
        admin_contact = config.get('admin_contact', 'killerskype')
        await bot.answer_callback_query(
            callback_query.id,
            f"‚õî –í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞. –í–æ–ø—Ä–æ—Å—ã? @{admin_contact}",
            show_alert=True
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å
    await dp.current_state().reset_state(with_data=False)
    return  # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å CancelHandler


if __name__ == '__main__':
    init_db()
    check_whitelist_table() 
    migrate_db() 
    safe_init_db()
    executor.start_polling(dp, skip_updates=True)
    
#by @killerskype
