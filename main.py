from datetime import datetime
import os
import platform
import sys
import logging
import asyncio
import tempfile
from threading import Thread
import zipfile
from datetime import datetime
import numpy as np
import rarfile
import zipfile
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from db import *
from datetime import time
import time
import signal
from datetime import datetime
import threading
import mimetypes
import time
import psutil
import codecs
import matplotlib.pyplot as plt
import traceback,shutil
from aiogram.types import BufferedInputFile
from collections import defaultdict
from datetime import datetime
from pathlib import Path
import pandas as pd
from aiogram.types import Message
from collections import defaultdict
from aiogram.types import FSInputFile 
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import subprocess
import os
from dotenv import load_dotenv
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.types import InputFile 
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ContentType

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
www = Path(f"users")
admin=[963729102,1624096187]
CHANNEL_ID = -1002707833409
www.mkdir(parents=True, exist_ok=True)
bot = Bot(token=API_TOKEN, request_timeout=300)
dp = Dispatcher()
y_n={}
count={}
libra={}
id_pip=1
user=1
channel_id=[]
user_variables = {}
active_processes = {}  # –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ user_id
log_queues = {}  
filr_ch=""

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å'),
         KeyboardButton(text='–õ–æ–≥–∏'),
        KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')],
        [KeyboardButton(text='–§–∞–π–ª—ã'), 
         KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏'), 
         KeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª')]
    ],
    resize_keyboard=True
)

library_yes_no=ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–°–∫–∞—á–∞—Ç—å'),
         KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)

yes_no_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–î–∞'),
         KeyboardButton(text='–ù–µ—Ç')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='Users'),
         KeyboardButton(text='–ò–Ω—Ñ–∞'),
        KeyboardButton(text='–§–∏–Ω–∞–Ω—Å—ã'),
        KeyboardButton(text='–ë–î')], 
        [KeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'),
         KeyboardButton(text='file'),
         KeyboardButton(text='CPU'),
         KeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏—è'),],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)

sms_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞'),
        KeyboardButton(text='–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')], 
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)


chanel_keybord=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                url="https://t.me/sever_host")],
            [InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", 
            callback_data="check_subscription")]])

notmain_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–°—Ç–æ–ø'),
         KeyboardButton(text='–õ–æ–≥–∏'),
        KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å')],
        [KeyboardButton(text='–§–∞–π–ª—ã'), 
         KeyboardButton(text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏'), 
         KeyboardButton(text='–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª')]
    ],
    resize_keyboard=True
)
otmena_keyboard= ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]],
    resize_keyboard=True
)
download=ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–í—Å–µ'),
        KeyboardButton(text='–ü–æ 1 —Ñ–∞–π–ª—É')], 
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)
download_id=ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–í—Å–µ file'),
        KeyboardButton(text='–ü–æ 1 file')], 
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)

file_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ë–µ–∑ –∞—Ä—Ö–∏–≤–∞'),
        KeyboardButton(text='–í—Å–µ –≤–º–µ—Å—Ç–µ,–∞—Ä—Ö–∏–≤–æ–º')], 
        [KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã'), 
        KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã'),
        KeyboardButton(text='–°–∫–∞—á–∞—Ç—å')], 
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)
delete=ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ'),
        KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å 1 —Ñ–∞–π–ª')],
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)


class BroadcastState(StatesGroup):
    glav_file = State()
    shea_file = State()
    one_file = State()
    library=State()
    yes_no=State()
    delete_state=State()
    dow=State()
    sms=State()
    sms2=State()
    waiting_for_message=State()
    waiting_for_confirmation=State()
    Message_from_human=State()
    Message_from_human2=State()
    infostate=State()
    library_yes=State()
    file_chek=State()
    one_file_admin=State()
    


@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    if await check_subscription(user_id):
        await callback.message.delete()
        await bot.send_message(user_id, ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è") )
    else:
        await callback.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@dp.message(F.text == '–û—Ç–º–µ–Ω–∞', StateFilter('*'))
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    if chek_start(i=user_id):
        await message.answer("–û—Ç–º–µ–Ω–∞",reply_markup=notmain_keyboard)
    else:
        await message.answer("–û—Ç–º–µ–Ω–∞",reply_markup=main_keyboard)
    await state.clear()


@dp.message(F.text == '/start')
async def process_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(user_id)=="1624096187":
        pass
    else:
        return
    
    h="<b>üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sever ‚ùÑÔ∏è</b>\nC–µ—Ä–≤–∏—Å –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ <b>Telegram –±–æ—Ç–æ–≤</b>, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ!\n\n‚ñ´Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ <b>Python 3.12.3 </b>\n‚ñ´Ô∏è –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è \n‚ñ´Ô∏è –ê–≤—Ç–æ-–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ \n‚ñ´Ô∏è 99.9% –∞–ø—Ç–∞–π–º –≥–∞—Ä–∞–Ω—Ç–∏—è\n\nüí¨ <u>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ </u>üîù"
    try:
        if not(chek_start(i=user_id)):
            await message.answer_photo(
                    photo="AgACAgIAAxkDAAImBmf6iT_tvKFzSxhw4l_qFvUlIopLAAIP6jEbWQPRS8g8YSW0Mqp6AQADAgADdwADNgQ",
                    caption=h,
                    reply_markup=main_keyboard,
                    parse_mode='HTML'
                )
        else:
            await message.answer_photo(
                    photo="AgACAgIAAxkDAAImBmf6iT_tvKFzSxhw4l_qFvUlIopLAAIP6jEbWQPRS8g8YSW0Mqp6AQADAgADdwADNgQ",
                    caption=h,
                    reply_markup=notmain_keyboard,
                    parse_mode='HTML')
    except:
        if not(chek_start(i=user_id)):
            await message.answer_photo(
                    photo=FSInputFile("photo/start.jpg"),
                    caption=h,
                    reply_markup=main_keyboard,
                    parse_mode='HTML'
                )
        else:
            await message.answer_photo(
                    photo=FSInputFile("photo/start.jpg"),
                    caption=h,
                    reply_markup=notmain_keyboard,
                    parse_mode='HTML')
    try:
        user_id = message.from_user.id
        user_dir = Path(f"users/{user_id}")
        venv_path = user_dir / ".venv"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        user_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ venv
        if not venv_path.exists():
            # –î–ª—è Ubuntu –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ python3
            process = await asyncio.create_subprocess_exec(
                "python3", "-m", "venv", str(venv_path),
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode != 0:
                error_msg = f"–û—à–∏–±–∫–∞ 404 \n{stderr.decode()}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù"
                logger.error(error_msg)
                return await message.answer(error_msg[:3000])
            
            logger.info(f"Created venv for user {user_id}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        await new(message.from_user.id,message.from_user.username)


    except PermissionError as e:
        logger.error(f"Permission denied: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
        
    except Exception as e:
        logger.error(f"Start error: {traceback.format_exc()}")
        await message.answer("üîß –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()
    

async def new(id,us):
    global admin
    if new_piople(id,us):
        await bot.send_message(chat_id=admin,text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω @{us}\nID: {id}")

async def send_message_to_user(user_id, message):
    user_id = str(user_id)
    try:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.text:
            await bot.send_message(
                chat_id=user_id,
                text=message.text,
                entities=message.entities,
                reply_markup=message.reply_markup
            )
        
        # –§–æ—Ç–æ
        elif message.photo:
            await bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –í–∏–¥–µ–æ
        elif message.video:
            await bot.send_video(
                chat_id=user_id,
                video=message.video.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (–∫—Ä—É–∂–æ–∫)
        elif message.video_note:
            await bot.send_video_note(
                chat_id=user_id,
                video_note=message.video_note.file_id,
                reply_markup=message.reply_markup
            )
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ
        elif message.voice:
            await bot.send_voice(
                chat_id=user_id,
                voice=message.voice.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document:
            await bot.send_document(
                chat_id=user_id,
                document=message.document.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –ê—É–¥–∏–æ
        elif message.audio:
            await bot.send_audio(
                chat_id=user_id,
                audio=message.audio.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –°—Ç–∏–∫–µ—Ä—ã
        elif message.sticker:
            await bot.send_sticker(
                chat_id=user_id,
                sticker=message.sticker.file_id,
                reply_markup=message.reply_markup
            )
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏
        elif message.animation:
            await bot.send_animation(
                chat_id=user_id,
                animation=message.animation.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –õ–æ–∫–∞—Ü–∏—è
        elif message.location:
            await bot.send_location(
                chat_id=user_id,
                latitude=message.location.latitude,
                longitude=message.location.longitude,
                reply_markup=message.reply_markup
            )
        
        # –í–µ–Ω—É (–º–µ—Å—Ç–æ)
        elif message.venue:
            await bot.send_venue(
                chat_id=user_id,
                latitude=message.venue.location.latitude,
                longitude=message.venue.location.longitude,
                title=message.venue.title,
                address=message.venue.address,
                foursquare_id=message.venue.foursquare_id,
                reply_markup=message.reply_markup
            )
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        elif message.contact:
            await bot.send_contact(
                chat_id=user_id,
                phone_number=message.contact.phone_number,
                first_name=message.contact.first_name,
                last_name=message.contact.last_name,
                reply_markup=message.reply_markup
            )
        
        # –û–ø—Ä–æ—Å—ã
        elif message.poll:
            await bot.send_poll(
                chat_id=user_id,
                question=message.poll.question,
                options=[opt.text for opt in message.poll.options],
                is_anonymous=message.poll.is_anonymous,
                type=message.poll.type,
                reply_markup=message.reply_markup
            )
        
        # Dice (–∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏)
        elif message.dice:
            await bot.send_dice(
                chat_id=user_id,
                emoji=message.dice.emoji,
                reply_markup=message.reply_markup
            )
        
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
        else:
            await bot.send_message(
                chat_id=user_id,
                text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
            )

    except TelegramForbiddenError:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except TelegramBadRequest as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@dp.message(F.text == '–õ–æ–≥–∏')
async def start(message: types.Message, state: FSMContext):
    try:
        await message.answer_document(types.FSInputFile(f"logs/{message.from_user.id}_logs.txt"))
    except:
        await message.answer(f"–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã")


@dp.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def start(message: types.Message, state: FSMContext):
    print(chek_file(message.from_user.id))
    user_id = message.from_user.id
    df = one_user(user_id)
    fil = chek_file(user_id)
    if str(fil)=="None":
        pass
    else:
        fil=fil[0]

    print(df)
    if chek_start(i=user_id):
        start_program="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ"
    else:
        start_program="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚ùå"
    now = datetime.now()
    time_serser=now.strftime("%H:%M %d.%m.%Y")
    h=f"–ü—Ä–æ—Ñ–∏–ª—å üë§\n\n–ò–º—è: @{df[0][1]}\nID: {user_id}\n–ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {fil}\n–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {start_program}\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:\nOC: Ubuntu 24.04.2 LTS\n–í—Ä–µ–º—è: {time_serser}"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkBAAIsrGgCmI7Zbu02iRrKmTa__Ss3bD_6AALM6jEb9o4RSIDagA7Lb2_MAQADAgADeQADNgQ",
            caption=h,
            parse_mode='HTML')
    except:
        await message.answer_photo(
        photo=FSInputFile("photo/profil.jpg"),
        caption=h,
        parse_mode='HTML')


@dp.message(F.text == '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
async def start(message: types.Message, state: FSMContext):
    global admin
    user_id = message.from_user.id
    if not(user_id in admin):
        return
    await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    await state.set_state(BroadcastState.Message_from_human)

@dp.message(StateFilter(BroadcastState.Message_from_human))
async def start(message: types.Message, state: FSMContext):
    global id_pip
    id_pip=message.text
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await state.clear()
    await state.set_state(BroadcastState.Message_from_human2)

@dp.message(StateFilter(BroadcastState.Message_from_human2))
async def start(message: types.Message, state: FSMContext):
    try:
        user_id=id_pip
        if message.text:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_message(
                chat_id=user_id,
                text=message.text,
                entities=message.entities,
                reply_markup=message.reply_markup
            )
        
        # –§–æ—Ç–æ
        elif message.photo:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –í–∏–¥–µ–æ
        elif message.video:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_video(
                chat_id=user_id,
                video=message.video.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ (–∫—Ä—É–∂–æ–∫)
        elif message.video_note:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_video_note(
                chat_id=user_id,
                video_note=message.video_note.file_id,
                reply_markup=message.reply_markup
            )
        
        # –ì–æ–ª–æ—Å–æ–≤—ã–µ
        elif message.voice:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_voice(
                chat_id=user_id,
                voice=message.voice.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –î–æ–∫—É–º–µ–Ω—Ç—ã
        elif message.document:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_document(
                chat_id=user_id,
                document=message.document.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –ê—É–¥–∏–æ
        elif message.audio:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_audio(
                chat_id=user_id,
                audio=message.audio.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –°—Ç–∏–∫–µ—Ä—ã
        elif message.sticker:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_sticker(
                chat_id=user_id,
                sticker=message.sticker.file_id,
                reply_markup=message.reply_markup
            )
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏
        elif message.animation:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_animation(
                chat_id=user_id,
                animation=message.animation.file_id,
                caption=message.caption,
                caption_entities=message.caption_entities,
                reply_markup=message.reply_markup
            )
        
        # –õ–æ–∫–∞—Ü–∏—è
        elif message.location:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_location(
                chat_id=user_id,
                latitude=message.location.latitude,
                longitude=message.location.longitude,
                reply_markup=message.reply_markup
            )
        
        # –í–µ–Ω—É (–º–µ—Å—Ç–æ)
        elif message.venue:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_venue(
                chat_id=user_id,
                latitude=message.venue.location.latitude,
                longitude=message.venue.location.longitude,
                title=message.venue.title,
                address=message.venue.address,
                foursquare_id=message.venue.foursquare_id,
                reply_markup=message.reply_markup
            )
        
        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
        elif message.contact:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_contact(
                chat_id=user_id,
                phone_number=message.contact.phone_number,
                first_name=message.contact.first_name,
                last_name=message.contact.last_name,
                reply_markup=message.reply_markup
            )
        
        # –û–ø—Ä–æ—Å—ã
        elif message.poll:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_poll(
                chat_id=user_id,
                question=message.poll.question,
                options=[opt.text for opt in message.poll.options],
                is_anonymous=message.poll.is_anonymous,
                type=message.poll.type,
                reply_markup=message.reply_markup
            )
        
        # Dice (–∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏)
        elif message.dice:
            await bot.send_message(id_pip,"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
            await bot.send_dice(
                chat_id=user_id,
                emoji=message.dice.emoji,
                reply_markup=message.reply_markup
            )
        
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
        else:
            await bot.send_message(
                chat_id=963729102,
                text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
            )
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")
    except TelegramForbiddenError:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except TelegramBadRequest as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await state.clear()

def activ_chek():
    count = 0
    users_info = []
    for user_id, processes in active_processes.items():
        if processes:
            user_count = len(processes)
            count += user_count
            users_info.append(user_id)
    return users_info


def get_system_info():
    try:
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU (–∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try:
            temp = f"{psutil.sensors_temperatures().get('coretemp', [{}])[0].current or 0:.1f}¬∞C"
        except:
            temp = "N/A"

        # –ó–∞–≥—Ä—É–∑–∫–∞ CPU
        cpu_load = f"{psutil.cpu_percent(interval=1):.1f}%"

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        mem = psutil.virtual_memory()
        mem_percent = f"{mem.percent:.1f}%"
        mem_used = f"{mem.used // (1024 * 1024)} MB"

        # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        disk = f"{psutil.disk_usage('/').percent}%"

        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        uptime = str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())).split('.')[0]

        return {
            "time": datetime.now().strftime("%H:%M"),
            "temp": temp,
            "cpu": cpu_load,
            "memory": f"{mem_used} ({mem_percent})",
            "disk": disk,
            "uptime": uptime,
            "os": f"{platform.system()} {platform.release()}"
        }
    except Exception as e:
        return {"error": f"System info unavailable: {str(e)}"}


async def send_stats(chat_id):
    info = get_system_info()
    message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        f"üïí *–í—Ä–µ–º—è:* `{info['time']}`\n"
        f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:* `{info['temp']}`\n"
        f"‚ö° *–ó–∞–≥—Ä—É–∑–∫–∞ CPU:* `{info['cpu']}`\n"
        f"üíæ *–ü–∞–º—è—Ç—å:* `{info['memory']}`\n"
        f"üíΩ *–î–∏—Å–∫ (/):* `{info['disk']}`\n"
        f"‚è± *–ê–ø—Ç–∞–π–º:* `{info['uptime']}`\n"
        f"üñ• *–û–°:* `{info['os']}`"
    )
    await bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")


def test_aktivate():
    o=5
    time.sleep(29)
    while True:
        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE bots SET program=0")
                conn.commit()
                for us in activ_chek():
                    cursor.execute(f"UPDATE bots SET program=1 WHERE id={us}")
                    conn.commit()
            print("–ó–∞–ø—É—Å–∫")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        if o==5:
            info=get_system_info()
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                tt=datetime.now().strftime("%d.%m.%Y")
                cursor.execute(f"INSERT INTO pc_info (date,time,temperature ,cpu,ram ,work_time) VALUES ('{tt}','{str(info['time'])}','{str(info['temp'])}','{str(info['cpu'])}','{str(info['memory'])}','{str(info['uptime'])}')")
                conn.commit()
                o=0
        else:
            o=o+1
        time.sleep(29)

async def send_db_periodically():
    while True:
        try:
            now = datetime.now()
            await bot.send_document(CHANNEL_ID, FSInputFile("users.db"), caption=now.strftime("%d.%m.%Y %H:%M:%S"))
            await asyncio.sleep(1800)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π sleep (–Ω–µ time.sleep!)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(10)


def chek_start(i):
    for user_id, processes in active_processes.items():
        if processes and str(i)==str(user_id):
            return True
    return False


async def deeeel(user_id, chat_id: int):
    base_path = Path(f"users/{user_id}")
    if not base_path.exists():
        await bot.send_message(chat_id, ("‚ùå –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞,–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É") )
        return
    result = []
    exclude = {'.venv'}
    for root, dirs, files in os.walk(str(base_path)): 
        dirs[:] = [d for d in dirs if d not in exclude]
        level = root.replace(str(base_path), '').count(os.sep)
        indent = ' ' * 4 * level
        rel_path = os.path.relpath(root, str(base_path)) 
        
        if rel_path == '.':
            result.append(f"üìÅ {base_path.name}")
        else:
            result.append(f"{indent}üìÅ {os.path.basename(root)}")
            
        sub_indent = ' ' * 4 * (level + 1)
        for file in files:
            result.append(f"{sub_indent}üìÑ {file}")
    
    structure = "\n".join(result) if result else "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
    await bot.send_message(chat_id, (f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n\n{structure}") )

active_processes = defaultdict(list)

@dp.message(F.text == '–ë–î')
async def show_active_processes(message: types.Message):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    await message.answer_document(types.FSInputFile("users.db"))


@dp.message(F.text == 'CPU')
async def show_active_processes(message: types.Message):
    x=[]
    y=[]
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    await send_stats(message.chat.id)
    temp=(temperature())[::-1]
    tim=(timm())[::-1]
    if len(tim) >= 140:
        for i in range(140):
            y.append(int((temp[i][0])[:2]))
        for i in range(140):
            x.append(tim[i][0])
        plt.bar((x[::-1])[:-1],(y[::-1])[:-1])
        plt.xticks(rotation=90, fontsize=2)
    else:

        for i in range(len(temp)):
            y.append(int((temp[i][0])[:2]))
        for i in range(len(tim)):
            x.append(tim[i][0])
        plt.bar((x[::-1])[:-1],(y[::-1])[:-1])
        plt.xticks(rotation=90, fontsize=2)
    plt.savefig('temperature.jpg', dpi=1500, bbox_inches='tight')
    plt.close()  
    await message.answer_document(types.FSInputFile("temperature.jpg"))
    os.remove('temperature.jpg')
        
            



@dp.message(F.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
async def show_active_processes(message: types.Message):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    try:
        count = 0
        users_info = []
        for user_id, processes in active_processes.items():
            if processes:
                user_count = len(processes)
                count += user_count
                users_info.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if count == 0:
            await message.answer("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            return
            
        report = [
            "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:",
            *users_info,
            "",
            f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {count}",
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏: {len(users_info)}"
        ]
        
        await message.answer("\n".join(report))
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)} \n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")

async def run_script_async(python_exec: str, file_path: str, user_id: int, bot: Bot, chat_id: int,qq):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
    print(python_exec, file_path, user_id, bot, chat_id,qq)
    try:
        os.remove(f'logs/{user_id}_logs.txt')
    except:
        pass
    open(f'logs/{user_id}_logs.txt', 'a').close()
    count[user_id]=0
    user_dir = os.path.abspath(f"users/{user_id}")
    global y_n
    print(y_n.get(chat_id, "–ù–µ –≤–≤–µ–¥–µ–Ω–∞"))

    process = await asyncio.create_subprocess_exec(
        python_exec,
        os.path.basename(file_path),
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
        cwd=user_dir,
        env=dict(os.environ, PYTHONIOENCODING='utf-8'))
    
    active_processes[user_id].append(process)
    
    async def read_output():
        decoder = codecs.getincrementaldecoder('utf-8')(errors='replace')
        buffer = ""
        try:
            while True:
                chunk = await process.stdout.read(4096)
                if not chunk:
                    break
                decoded = decoder.decode(chunk)
                if decoded:
                    buffer += decoded
                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        log_msg = f" [USER {user_id} LOG!!] {line.strip()}"
                        print(log_msg)  # –í –∫–æ–Ω—Å–æ–ª—å
                        try:
                            if qq=="–î–∞":
                                await bot.send_message(chat_id, log_msg)
                            with open(f'logs/{user_id}_logs.txt', 'a') as file:
                                file.write((datetime.now().strftime('%d.%m.%Y %H:%M'))+log_msg + '\n')
                                count[user_id] += 1
                            if count[user_id]>1000:
                                with open(f'logs/{user_id}_logs.txt', 'r', encoding='utf-8') as fin, \
                                    open(f'logs/{user_id}_logss.txt', 'w', encoding='utf-8') as fout:
                                    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                                    next(fin)
                                    # –∫–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                    for line in fin:
                                        fout.write(line)
                                os.replace(f'logs/{user_id}_logss.txt', f'logs/{user_id}_logs.txt')
                        except:
                            pass
        finally:
            await process.wait()
            active_processes[user_id].remove(process)
            if buffer:
                log_msg = f"[USER {user_id} LOG!] {buffer.strip()}"
                print(log_msg)  # –í –∫–æ–Ω—Å–æ–ª—å
                try:
                    if qq=="–î–∞":
                        await bot.send_message(chat_id, log_msg)
                    with open(f'logs/{user_id}_logs.txt', 'a') as file:
                        file.write((datetime.now().strftime('%d.%m.%Y %H:%M'))+log_msg + '\n')
                        count[user_id] += 1
                    if count[user_id]>1000:
                        with open(f'logs/{user_id}_logs.txt', 'r', encoding='utf-8') as fin, \
                            open(f'logs/{user_id}_logss.txt', 'w', encoding='utf-8') as fout:
                            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                            next(fin)
                            # –∫–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                            for line in fin:
                                fout.write(line)
                        os.replace(f'logs/{user_id}_logss.txt', f'logs/{user_id}_logs.txt')
                except:
                    pass
    
    asyncio.create_task(read_output())
    return process




async def start2(i):
    all_info=file_info(i)
    name=(all_info)[2]
    yes_no=(all_info)[4]
    try:
        os.remove(f'logs/{i}_logs.txt')
    except:
        pass
    open(f'logs/{i}_logs.txt', 'a').close()
    user_dir = Path(f"users/{i}").resolve()
    venv_dir = Path(f"users/{i}/.venv").resolve()

    file_path = user_dir / name     
    python_exec = venv_dir / ("Scripts/python.exe" if sys.platform == "win32" else "bin/python")
    if not python_exec.exists():
        python_exec = next((p for p in venv_dir.glob("bin/python*") if p.exists()), None)
    if not python_exec:
        raise FileNotFoundError("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python –Ω–µ –Ω–∞–π–¥–µ–Ω")
    process = await asyncio.create_subprocess_exec(
        python_exec,
        os.path.basename(file_path),
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.STDOUT,
        cwd=user_dir,
        env=dict(os.environ, PYTHONIOENCODING='utf-8'))
    active_processes[i].append(process)
    async def read_output():
        decoder = codecs.getincrementaldecoder('utf-8')(errors='replace')
        buffer = ""
        try:
            while True:
                chunk = await process.stdout.read(4096)
                if not chunk:
                    break
                decoded = decoder.decode(chunk)
                if decoded:
                    buffer += decoded
                    while '\n' in buffer:
                        line, buffer = buffer.split('\n', 1)
                        log_msg = f"[USER {i} LOG!!] {line.strip()}"
                        print(log_msg)  # –í –∫–æ–Ω—Å–æ–ª—å
                        try:
                            if yes_no=="–î–∞":
                                await bot.send_message(i, log_msg)
                            with open(f'logs/{i}_logs.txt', 'a') as file:
                                file.write((datetime.now().strftime('%d.%m.%Y %H:%M'))+log_msg + '\n')
                                count[i] += 1
                            if count[i]>1000:
                                with open(f'logs/{i}_logs.txt', 'r', encoding='utf-8') as fin, \
                                    open(f'logs/{i}_logss.txt', 'w', encoding='utf-8') as fout:
                                    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                                    next(fin)
                                    # –∫–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                                    for line in fin:
                                        fout.write(line)
                                os.replace(f'logs/{i}_logss.txt', f'logs/{i}_logs.txt')
                        except:
                            pass
        finally:
            await process.wait()
            active_processes[i].remove(process)
            if buffer:
                log_msg = f"[USER {i} LOG!] {buffer.strip()}"
                print(log_msg)  # –í –∫–æ–Ω—Å–æ–ª—å
                try:
                    if yes_no=="–î–∞":
                        await bot.send_message(i, log_msg)
                    with open(f'logs/{i}_logs.txt', 'a') as file:
                        file.write((datetime.now().strftime('%d.%m.%Y %H:%M'))+log_msg + '\n')
                        count[i] += 1
                    if count[i]>1000:
                        with open(f'logs/{i}_logs.txt', 'r', encoding='utf-8') as fin, \
                            open(f'logs/{i}_logss.txt', 'w', encoding='utf-8') as fout:
                            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                            next(fin)
                            # –∫–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                            for line in fin:
                                fout.write(line)
                        os.replace(f'logs/{i}_logss.txt', f'logs/{i}_logs.txt')
                except:
                    pass

    asyncio.create_task(read_output())
    return process


async def check_subscription(user_id):
    member = await bot.get_chat_member(chat_id="-1002535341751", user_id=user_id)
    if not(member.status in ["member", "administrator", "creator"]):
        await bot.send_message(user_id,
            "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=chanel_keybord)
        return False
    else:
        return True

async def start_csv():
    global channel_id
    stt=start_ckript()
    print(stt)
    for i in stt:
        await start2(i=i[0])


@dp.message(F.text.lower() == 'iluz')
async def stop_script(message: types.Message):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ê–¥–º–∏–Ω!",reply_markup=admin_keyboard)
    
@dp.message(F.text == 'Users')
async def stop_script(message: types.Message, state: FSMContext):
    global admin
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {count_piple()[0][0]}")
    user_id = message.from_user.id
    if not(user_id in admin):
        return
    df = userss()
    with open("users.txt","a") as file:
        for i in df:
            file.write(f"@{i[1]} ID: {i[0]} Balance: {i[2]}‚ÇΩ\n")
    await message.answer_document(types.FSInputFile("users.txt"))
    os.remove('users.txt')



@dp.message(F.text == '–ü–æ 1 —Ñ–∞–π–ª—É')
async def create_zip_handler(message: types.Message, state: FSMContext):
    await state.set_state(BroadcastState.dow)
    user_id = message.from_user.id
    await deeeel(user_id=user_id,chat_id=message.chat.id)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É",reply_markup=otmena_keyboard)


@dp.message(StateFilter(BroadcastState.dow))
async def create_zip_handler(message: types.Message):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–¥–æ —Ç–µ—Å—Ç–æ–º!")
        return
    
    try:
        search_path = Path(f"users/{user_id}")
        target = message.text.strip()

        # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        found_files = [
            p for p in search_path.rglob(target) 
            if '.venv' not in p.parts and p.exists()
        ]

        if not found_files:
            await message.answer(f"‚ùå –§–∞–π–ª/–ø–∞–ø–∫–∞ '{target}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        for file_path in found_files:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
            if file_path.name.startswith('.') or file_path.name == '__pycache__':
                continue

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö .venv
            if any(part == '.venv' for part in file_path.parts):
                continue

            if file_path.is_dir():
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—Ä—Ö–∏–≤–∞
                with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as tmp:
                    zip_filename = tmp.name
                    
                    with zipfile.ZipFile(zip_filename, 'w') as zipf:
                        for root, dirs, files in os.walk(file_path):
                            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É .venv –ø—Ä–∏ –æ–±—Ö–æ–¥–µ
                            dirs[:] = [d for d in dirs if d != '.venv']
                            
                            for file in files:
                                full_path = Path(root) / file
                                if '.venv' in full_path.parts:
                                    continue
                                
                                arcname = os.path.relpath(full_path, file_path)
                                zipf.write(full_path, arcname)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
                    with open(zip_filename, 'rb') as f:
                        await message.answer_document(
                            document=BufferedInputFile(
                                f.read(), 
                                filename=f"{file_path.name}.zip"
                            ),
                            caption=f"–ê—Ä—Ö–∏–≤ –ø–∞–ø–∫–∏: {file_path.name}"
                        )
            
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                with open(file_path, 'rb') as f:
                    await message.answer_document(
                        document=BufferedInputFile(
                            f.read(),   
                            filename=file_path.name
                        ),
                        caption=f"–§–∞–π–ª: {file_path.name}"
                    )

        await message.answer("‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"File send error: {str(e)}")
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")

@dp.message(F.text == '–í—Å–µ')
async def create_zip_handler(message: types.Message):
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...",reply_markup=download)
    user_id = message.from_user.id
    user_dir = f"users/{user_id}"
    zip_filename = f"{user_id}.zip"
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        for root, dirs, files in os.walk(user_dir):
            if '.venv' in dirs:
                dirs.remove('.venv')
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, user_dir)
                zipf.write(file_path, arcname)
    with open(zip_filename, 'rb') as file:
        await message.answer_document(
            document=BufferedInputFile(file.read(), filename=zip_filename),
            caption="–í–∞—à–∏ —Ñ–∞–π–ª—ã:")
    os.remove(zip_filename)
    await new(message.from_user.id,message.from_user.username)




@dp.message(F.text == '–í—Å–µ –≤–º–µ—Å—Ç–µ,–∞—Ä—Ö–∏–≤–æ–º')
async def stop_script(message: types.Message, state: FSMContext):
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    await state.set_state(BroadcastState.shea_file)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏; –æ–Ω –±—É–¥–µ—Ç —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.\n–í –∞—Ä—Ö–∏–≤–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è",reply_markup=otmena_keyboard)
    await new(message.from_user.id,message.from_user.username)

@dp.message(F.content_type.in_({'document'}), StateFilter(BroadcastState.shea_file))
async def handle_file(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        doc = message.document
        user_dir = f"users/{user_id}"
        file_path = os.path.join(user_dir, doc.file_name)
        await message.bot.download(doc, destination=file_path) 
        
        file_ext = doc.file_name.split('.')[-1].lower()
        
        if file_ext not in ('zip'):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP")
            return
        if file_ext == 'zip':
            with zipfile.ZipFile(file_path, 'r') as zip_ref:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                namelist = zip_ref.namelist()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                root_dirs = {name.split('/')[0] for name in namelist if '/' in name}
                
                if len(root_dirs) == 1:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–¥–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    root_dir = root_dirs.pop()
                    for member in namelist:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º—É –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        if member == root_dir + '/':
                            continue
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –±–µ–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        new_path = member[len(root_dir)+1:]
                        if not new_path:
                            continue
                        
                        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                        full_path = os.path.join(user_dir, new_path)
                        
                        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞
                        if member.endswith('/'):
                            os.makedirs(full_path, exist_ok=True)
                        else:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
                            with zip_ref.open(member) as source, open(full_path, 'wb') as target:
                                target.write(source.read())
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –µ–¥–∏–Ω–æ–π –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    zip_ref.extractall(user_dir)
                await message.answer("–ì–æ—Ç–æ–≤–æ") 
            os.remove(f"users/{user_id}/{doc.file_name}")
        await state.clear()
    except TelegramBadRequest as e:
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
    except:
        await message.answer("–û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º")

    
@dp.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã')
async def show_files(message: types.Message): 
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    user_id = message.from_user.id
    base_path = Path(f"users/{user_id}")
    
    if not base_path.exists():
        await message.answer("‚ùå –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 
        return
    
    result = []
    exclude = {'.venv'}
    
    for root, dirs, files in os.walk(str(base_path)): 
        dirs[:] = [d for d in dirs if d not in exclude]
        
        level = root.replace(str(base_path), '').count(os.sep)
        indent = ' ' * 4 * level
        rel_path = os.path.relpath(root, str(base_path)) 
        
        if rel_path == '.':
            result.append(f"üìÅ {base_path.name}")
        else:
            result.append(f"{indent}üìÅ {os.path.basename(root)}")
            
        sub_indent = ' ' * 4 * (level + 1)
        for file in files:
            result.append(f"{sub_indent}üìÑ {file}")
    
    structure = "\n".join(result) if result else "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
    if len(structure)>4000:
        with open(f"file_{user_id}" , "a") as file:
            file.write(structure)
            await message.answer_document(types.FSInputFile(f"file_{user_id}"))
            os.remove(f"file_{user_id}")
    else:
        await message.answer(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n\n{structure}") 
    await new(message.from_user.id,message.from_user.username)

@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
async def stop_script(message: types.Message, state: FSMContext):
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    h="–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è:"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkDAAImWWf6kz3peHN3mu6_upRaJM0V1wxWAALn5DEbWQPZS6jLzurt0PIWAQADAgADdwADNgQ",
            caption=h,
            reply_markup=delete,
            parse_mode='HTML')
    except:
        await message.answer_photo(
        photo=FSInputFile("photo/delete.jpg"),
        caption=h,
        reply_markup=delete,
        parse_mode='HTML')


@dp.message(F.text=="–°–æ–æ–±—â–µ–Ω–∏—è")
async def adminn(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    await message.answer("–í—ã–±—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",reply_markup=sms_keyboard)

@dp.message(F.text=="–ò–Ω—Ñ–∞")
async def adminn(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    df = userss()
    with open("users.txt","a") as file:
        for i in df:
            file.write(f"@{i[1]} ID: {i[0]} Balance: {i[2]}‚ÇΩ\n")
    await message.answer_document(types.FSInputFile("users.txt"))
    os.remove('users.txt')
    await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.infostate)
    
@dp.message(StateFilter(BroadcastState.infostate))
async def stop_script(message: types.Message, state: FSMContext):
    try:
        id_inf=int(message.text)
    except:
        await message.answer("–ù—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã")
        return
    info_from_id=one_user(id_inf)
    if info_from_id==[]:
        await message.answer("–ù–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ç–∞–∫–∏–º id")
        return
    info_from_id=info_from_id[0]
    skript=file_info(id_inf)
    print(skript)
    if skript == None:
        skript="–ù–∏ –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
    else:
        print(skript)

        skript=f"–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª: {skript[2]}\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: {skript[3]}\n–õ–æ–≥–∏: {skript[4]}"
    await message.answer(f"–Æ–∑–µ—Ä @{info_from_id[1]}\nID {info_from_id[0]}\n–ë–∞–ª–∞–Ω—Å: {info_from_id[2]}‚ÇΩ\n–î–∞—Ç–∞ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ {info_from_id[3]}\n"+skript)
    user_id = id_inf
    base_path = Path(f"users/{user_id}")
    
    if not base_path.exists():
        await message.answer("‚ùå –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 
        return
    
    result = []
    exclude = {'.venv'}
    
    for root, dirs, files in os.walk(str(base_path)): 
        dirs[:] = [d for d in dirs if d not in exclude]
        
        level = root.replace(str(base_path), '').count(os.sep)
        indent = ' ' * 4 * level
        rel_path = os.path.relpath(root, str(base_path)) 
        
        if rel_path == '.':
            result.append(f"üìÅ {base_path.name}")
        else:
            result.append(f"{indent}üìÅ {os.path.basename(root)}")
            
        sub_indent = ' ' * 4 * (level + 1)
        for file in files:
            result.append(f"{sub_indent}üìÑ {file}")
    
    structure = "\n".join(result) if result else "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
    if len(structure)>4000:
        with open(f"file_{user_id}" , "a") as file:
            file.write(structure)
            await message.answer_document(types.FSInputFile(f"file_{user_id}"))
            os.remove(f"file_{user_id}")
    else:
        await message.answer(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n\n{structure}") 
    await message.answer(f"–ì–æ—Ç–æ–≤–æ",reply_markup=admin_keyboard) 
    await state.clear()

@dp.message(F.text=="–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def adminn(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global admin
    if not(user_id==admin):
        return
    await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.sms)

@dp.message(StateFilter(BroadcastState.sms))
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global us
    if not message.text:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–¥–æ —Ç–µ—Å—Ç–æ–º!")
        return
    us=message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await state.clear()
    await state.set_state(BroadcastState.sms2)

@dp.message(StateFilter(BroadcastState.sms2))
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global us

async def broadcast_message(message: types.Message, state: FSMContext, bot_message):
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    pol=all_id()
    for user_id in pol:
        await send_message_to_user(user_id[0], bot_message)
        await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ –±—ã –Ω–µ –∑–∞–±–ª–æ—á–∏–ª–∏ –±–æ—Ç–∞
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@dp.message(F.text == "file")
async def start_broadcast_handler(message: types.Message, state: FSMContext):
    global admin
    user_id = message.from_user.id
    if not(user_id in admin):
        return
    df = userss()
    with open("users.txt","a") as file:
        for i in df:
            file.write(f"@{i[1]} ID: {i[0]} Balance: {i[2]}‚ÇΩ\n")
    await message.answer_document(types.FSInputFile("users.txt"))
    os.remove('users.txt')
    await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.file_chek)


@dp.message(StateFilter(BroadcastState.file_chek))
async def create_zip_handler(message: types.Message, state: FSMContext):
    global filr_ch
    if not message.text:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–¥–æ —Ç–µ—Å—Ç–æ–º!")
        return
    try:
        if one_user(message.text)==[]:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        filr_ch=message.text
    except:
        await message.answer("–û—à–∏–±–∫–∞")
        return
    h="–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç:"
    await message.answer(h,reply_markup=download_id)
    await state.clear()

@dp.message(F.text == '–í—Å–µ file')
async def create_zip_handler(message: types.Message):
    global filr_ch
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...",reply_markup=download)
    user_id = filr_ch
    user_dir = f"users/{user_id}"
    zip_filename = f"{user_id}.zip"
    with zipfile.ZipFile(zip_filename, 'w') as zipf:
        for root, dirs, files in os.walk(user_dir):
            if '.venv' in dirs:
                dirs.remove('.venv')
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, user_dir)
                zipf.write(file_path, arcname)
    with open(zip_filename, 'rb') as file:
        await message.answer_document(
            document=BufferedInputFile(file.read(), filename=zip_filename),
            caption="–í–∞—à–∏ —Ñ–∞–π–ª—ã:")
    os.remove(zip_filename)
    await new(message.from_user.id,message.from_user.username)

@dp.message(F.text == "–ü–æ 1 file")
async def start_broadcast_handler(message: types.Message, state: FSMContext):
    
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–≤",reply_markup=otmena_keyboard)


@dp.message(F.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_broadcast"""
    global admin
    user_id = message.from_user.id
    if not(user_id in admin):
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(BroadcastState.waiting_for_message)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(StateFilter(BroadcastState.waiting_for_message))
async def get_broadcast_message_handler(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    global admin
    user_id = message.from_user.id
    if not(user_id in admin):
        return
    await state.update_data(message_to_broadcast=message)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n{message.text if message.text else '–§–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è'}\n\n–ù–∞–∂–º–∏—Ç–µ /confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å")
    await state.set_state(BroadcastState.waiting_for_confirmation)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è


@dp.message(Command("confirm"), StateFilter(BroadcastState.waiting_for_confirmation))
async def confirm_broadcast_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    global admin
    if not(user_id in admin):
        return
    data = await state.get_data()
    message_to_broadcast = data.get("message_to_broadcast")
    await broadcast_message(message, state, message_to_broadcast)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å 1 —Ñ–∞–π–ª')
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    user_id = message.from_user.id
    base_path = Path(f"users/{user_id}")
    
    if not base_path.exists():
        await message.answer("‚ùå –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 
        return
    
    result = []
    exclude = {'.venv'}
    
    for root, dirs, files in os.walk(str(base_path)): 
        dirs[:] = [d for d in dirs if d not in exclude]
        
        level = root.replace(str(base_path), '').count(os.sep)
        indent = ' ' * 4 * level
        rel_path = os.path.relpath(root, str(base_path)) 
        
        if rel_path == '.':
            result.append(f"üìÅ {base_path.name}")
        else:
            result.append(f"{indent}üìÅ {os.path.basename(root)}")
            
        sub_indent = ' ' * 4 * (level + 1)
        for file in files:
            result.append(f"{sub_indent}üìÑ {file}")
    
    structure = "\n".join(result) if result else "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞"
    if len(structure)>4000:
        with open(f"file_{user_id}" , "a") as file:
            file.write(structure)
            await message.answer_document(types.FSInputFile(f"file_{user_id}"))
            os.remove(f"file_{user_id}")
    else:
        await message.answer(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n\n{structure}") 
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, photo.jpg):",reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.delete_state)
    await new(message.from_user.id,message.from_user.username)

@dp.message(StateFilter(BroadcastState.delete_state))
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–¥–æ —Ç–µ—Å—Ç–æ–º!")
        return
    safe_filename = os.path.basename(message.text)  # –ó–∞—â–∏—Ç–∞ –æ—Ç path traversal
    user_dir = os.path.abspath(f"users/{user_id}")
    file_path = os.path.join(user_dir, safe_filename)
    if not os.path.exists(file_path):
        await message.answer(f"‚ùå –§–∞–π–ª {safe_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    protected = ['.venv', 'venv', '__pycache__']
    if any(part in protected for part in file_path.split(os.sep)):
        await message.answer("‚õî –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!")
        return
    try:
        if os.path.isfile(file_path):
            os.remove(file_path)
            msg = f"‚úÖ –§–∞–π–ª {safe_filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        elif os.path.isdir(file_path):
            shutil.rmtree(file_path)
            msg = f"‚úÖ –ü–∞–ø–∫–∞ {safe_filename} –∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã"
        await message.answer(msg)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
    await message.answer(f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ ‚Üì")
    

    
    



@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ')
async def stop_script(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    folder_path = f"users/{user_id}"
    try:
        folder_path
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–ø–∫–µ
        for filename in os.listdir(folder_path):
            file_path = os.path.join(folder_path, filename)
            
            if filename == ".venv":
                continue
                
            try:
                if os.path.isfile(file_path) or os.path.islink(file_path):
                    os.unlink(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ —Å–∏–º–ª–∏–Ω–∫–∏
                elif os.path.isdir(file_path):
                    shutil.rmtree(file_path)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")

        await message.answer(f"–û—Å–Ω–æ–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        await message.answer(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

@dp.message(F.text == '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏')
async def stop_script(message: types.Message, state: FSMContext):
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    h="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π: —Å–∫–∞—á–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?"
    # h="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'aiogram') –∏ –¥–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkDAAImUmf6kqIaJiO978TprcGg1vzNXmV7AALe5DEbWQPZSwJZBc7J019HAQADAgADdwADNgQ",
            caption=h,
            reply_markup=library_yes_no,
            parse_mode='HTML'
        )
    except:
        await message.answer_photo(
            photo=FSInputFile("photo/library.jpg"),
            caption=h,
            reply_markup=library_yes_no,
            parse_mode='HTML')
    await state.set_state(BroadcastState.library)
    await new(message.from_user.id,message.from_user.username)

@dp.message(F.text=="–£–¥–∞–ª–∏—Ç—å", StateFilter(BroadcastState.library))
@dp.message(F.text=="–°–∫–∞—á–∞—Ç—å", StateFilter(BroadcastState.library))
async def handle_file(message: types.Message, state: FSMContext):
    libra[message.from_user.id]=message.text
    if message.text=="–°–∫–∞—á–∞—Ç—å":
        h="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'aiogram') –∏ –¥–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    else:
        await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
        try:
            user_id = message.from_user.id
            venv_dir = Path(f"users/{user_id}/.venv")
            venv_dir.mkdir(parents=True, exist_ok=True)
            pip_path = venv_dir / "Scripts" / "pip.exe" if sys.platform == "win32" else venv_dir / "bin" / "pip"
            h="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'aiogram') –∏ –¥–æ–∂–¥–∏—Å—å —É–¥–∞–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:"
            process =(subprocess.run(
                    [str(pip_path), "list"],
                    check=True,
                    capture_output=True,
                    text=True,
                    timeout=400))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            return
        await message.answer(process.stdout)
    await message.answer(h,reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.library_yes)

@dp.message(F.content_type.in_({'text'}), StateFilter(BroadcastState.library_yes))
async def handle_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not message.text:
        await message.answer("–ù–∞–¥–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º")
        return
    library_name = message.text.strip()
    venv_dir = Path(f"users/{user_id}/.venv")
    venv_dir.mkdir(parents=True, exist_ok=True)
    all_libraries = ["psutil","os","requests","http.client","pyautogui","selenium","exec","eval","subprocess","importlib","urllib","shutil","pickle","cryptography","pyCrypto","fake_useragent","requests-html","beautifulsoup4","scapy","pwn","paramiko","socket","fuzzywuzzy","pip"]
    for i in all_libraries:
        if str(message.text) in i:
            await message.answer(f"–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {str(message.text)} –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
            return
    pip_path = venv_dir / "Scripts" / "pip.exe" if sys.platform == "win32" else venv_dir / "bin" / "pip"
    try:
        if libra[message.from_user.id]=="–°–∫–∞—á–∞—Ç—å":
            await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
            process = subprocess.run(
                [str(pip_path), "install", library_name],
                check=True,
                capture_output=True,
                text=True,
                timeout=400)
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n{process.stdout[:4000]}")
        else:
            await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
            process = subprocess.run(
                [str(pip_path), "uninstall", "-y", library_name],
                check=True,
                capture_output=True,
                text=True,
                timeout=400)
            if process=="":
                await message.answer("–î–∞–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            await message.answer(f"‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n{process.stdout[:4000]}")
    except subprocess.CalledProcessError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è:\n{e.stderr[:4000]}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
    except subprocess.TimeoutExpired:
        await message.answer("‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
    

@dp.message(F.text == '–°—Ç–æ–ø')
async def stop_script(message: types.Message):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(user_id)=="1624096187":
        pass
    else:
        return
    user_dir = Path(f"users/{user_id}").resolve()

    # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    processes = []
    for proc in psutil.process_iter():
        try:
            if proc.cwd() == str(user_dir) and "python" in proc.name().lower():
                processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    if not processes:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!", reply_markup=main_keyboard)
        return

    killed = []
    for proc in processes:
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤
            for child in proc.children(recursive=True):
                child.kill()
            proc.kill()
            killed.append(str(proc.pid))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ PID {proc.pid}: {e}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")

    if killed:
        await message.answer(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã: {', '.join(killed)}", reply_markup=main_keyboard)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã", reply_markup=main_keyboard)
    
@dp.message(F.text == '–ë–µ–∑ –∞—Ä—Ö–∏–≤–∞')
async def stop_script(message: types.Message, state: FSMContext):
    if await check_subscription(message.from_user.id) or str(message.from_user.id)=="1624096187":
        pass
    else:
        return
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (venv –∏ —Ç–¥.), –±–µ–∑ —Å–∂–∞—Ç–∏—è –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",reply_markup=otmena_keyboard)
    await state.set_state(BroadcastState.one_file)
    await new(message.from_user.id,message.from_user.username)

@dp.message(
    F.content_type.in_({
        ContentType.DOCUMENT,
        ContentType.PHOTO,
        ContentType.VIDEO,
        ContentType.AUDIO,
        ContentType.VOICE,
        ContentType.VIDEO_NOTE,
        ContentType.STICKER
    }),
    StateFilter(BroadcastState.one_file)
)
async def handle_file(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    SAVE_FOLDER = f"users/{user_id}"
    os.makedirs(SAVE_FOLDER, exist_ok=True)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞
        file_obj = None
        file_type = None
        mime_type = None

        if message.document:
            file_obj = message.document
            file_type = 'document'
            mime_type = file_obj.mime_type
        elif message.photo:
            file_obj = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            file_type = 'photo'
            mime_type = 'image/jpeg'
        elif message.video:
            file_obj = message.video
            file_type = 'video'
            mime_type = 'video/mp4'
        elif message.audio:
            file_obj = message.audio
            file_type = 'audio'
            mime_type = 'audio/mpeg'
        elif message.voice:
            file_obj = message.voice
            file_type = 'voice'
            mime_type = 'audio/ogg'
        elif message.video_note:
            file_obj = message.video_note
            file_type = 'video_note'
            mime_type = 'video/mp4'
        elif message.sticker:
            file_obj = message.sticker
            file_type = 'sticker'
            mime_type = 'image/webp' if message.sticker.is_animated else 'image/webp'

        if not file_obj:
            await message.answer("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = int(time.time())
        ext = mimetypes.guess_extension(mime_type) or '.bin'
        
        if file_type == 'document' and file_obj.file_name:
            file_name = file_obj.file_name
        else:
            # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            ext = ext.lstrip('.')
            file_name = f"{file_type}_{timestamp}.{ext}"

        # –ü–æ–ª—É—á–∞–µ–º file_id –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_id = file_obj.file_id
        tg_file = await bot.get_file(file_id)
        file_path = os.path.join(SAVE_FOLDER, file_name)

        await bot.download_file(tg_file.file_path, destination=file_path)
        await message.answer(f"–§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
        await state.clear()

@dp.message(F.text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å')
async def process_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if await check_subscription(message.from_user.id) or str(user_id)=="1624096187":
        pass
    else:
        return
    if chek_start(i=user_id):
        await message.answer("–í–∞—à –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    h="–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ (–ª–æ–≥–∏) –≤ —á–∞—Ç? –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ª–æ–≥–∏ –≤ –ª—é–±–æ–º –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–õ–æ–≥–∏'"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkDAAImVGf6krJoxdXQsStOmoBjgvTqvgOWAALf5DEbWQPZS8WmCDLRHc5_AQADAgADdwADNgQ",
            caption=h,
            reply_markup=yes_no_keyboard,
            parse_mode='HTML')
    except:
        await message.answer_photo(
                photo=FSInputFile("photo/global_file.jpg"),
                caption=h,
                reply_markup=yes_no_keyboard,
                parse_mode='HTML')
    await state.set_state(BroadcastState.yes_no)


@dp.message(F.text.in_(['–î–∞','–ù–µ—Ç']), StateFilter(BroadcastState.yes_no))
async def process_start(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    user_id = message.from_user.id
    
    async def check_forbidden_code(directory):
        forbidden = {
        # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        "eval(", "exec(", "os.system(", "subprocess.Popen(", "shutil.rmtree(",
        
        # –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        ".decode('base64')", "String.fromCharCode(",  # JS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ
        "b64decode(", "getattr(sys.modules['os'], 'sy'",
        "f'os.system({user_input})'",  # f-—Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä—è–º—ã–º –≤—ã–∑–æ–≤–æ–º
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Å shell
        "shell=True", "subprocess.run(..., shell=True)",
        
        # –û–ø–∞—Å–Ω—ã–µ –º–æ–¥—É–ª–∏/–∏–º–ø–æ—Ä—Ç—ã
        "import os; os.system(", "from os import system",
        "__import__('os').system(", "ctypes.WinDLL(",
        
        # –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º        
        # –°–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        "requests.get(unsafe_input)", "urllib.urlopen(UNTRUSTED_URL)",
        "socket.create_connection((HOST, PORT))",
        
        # –ò–Ω—ä–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—è–≤–Ω—ã–µ —Å–ª—É—á–∞–∏)
        "execute(f\"DROP TABLE {var}\")",  # SQL-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
        "eval(f'os.system({user_input})')",
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è
        "sys._getframe(", "inspect.currentframe()",
        
        # –û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ Unicode (—è–≤–Ω—ã–µ homoglyph)
        "–æs.system",  # –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è '–æ'
        "s—Éstem("     # Unicode-–∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
        
        # –û–ø–∞—Å–Ω—ã–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        "pickle.load(", "marshal.loads(", "yaml.unsafe_load(",
        
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ/–ø–∞–∫–µ—Ç—ã (–≤ –æ–ø–∞—Å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
        "zlib.decompress(", "tarfile.extractall()",
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã/–≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ API
        "docker.from_env().containers.run(", "kubernetes.client.CoreV1Api",
        
        # JS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª—é—á–∞–µ—Ç –≤–µ–±)
        "eval(request.cookies)", "document.write(UNSAFE_HTML)", "subprocess.run(","os.system(","os.popen("
    }
        for root, _, files in os.walk(directory):
            for filename in files:
                file_path = Path(root) / filename
                if '.venv' in file_path.parts:  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ .venv –≤ –ø—É—Ç–∏
                    continue
                    
                try:
                    with open(file_path, "r", encoding='utf-8') as f:
                        for line in f:
                            if any(s in line for s in forbidden):
                                await message.answer(
                                    f"–§–∞–π–ª: {file_path.name}\n\n"
                                    f"‚õîÔ∏è–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ‚õîÔ∏è\n{(str(line))[:3000]}"
                                )
                                return False
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return True

    try:
        if not(str(user_id) == str(admin) or str(user_id) == "6523058852" or str(user_id) == "7765076958"):
            if not await check_forbidden_code(f"users/{user_id}"):
                return



        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        current_file = chek_file(user_id)
        if str(current_file)=="None":
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª!")
            return
        else:
            current_file=current_file[0]
        yes(user_id,message.text)
        qq=message.text
        user_dir = Path(f"users/{user_id}").resolve()
        file_path = user_dir / current_file
        
        if not file_path.exists():
            await message.answer("–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        venv_dir = user_dir / ".venv"
        python_exec = venv_dir / ("Scripts/python.exe" if sys.platform == "win32" else "bin/python")
        
        if not python_exec.exists():
            python_exec = next((p for p in venv_dir.glob("bin/python*") if p.exists()), None)
            if not python_exec:
                raise FileNotFoundError("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not os.access(python_exec, os.X_OK):
            python_exec.chmod(0o755)
        process = await run_script_async(
            python_exec, 
            file_path, 
            user_id,
            qq=qq,
            bot=message.bot,
            chat_id=message.chat.id,
        )
        
        await message.answer(f"üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω! PID: {process.pid}", reply_markup=notmain_keyboard)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù"
        logger.exception(error_msg)
        await message.answer(error_msg)


@dp.message(F.text == '–§–∞–π–ª—ã')
async def process_start(message: types.Message, state: FSMContext):
    await state.set_state(BroadcastState.shea_file)
    h=f"–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –¥–ª—è —É–ø–∞—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏:"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkDAAIm6Gf6nYM-SrjXQTmAxPwTvm_IYQZhAAJD5TEbWQPZS58os2iltGUYAQADAgADdwADNgQ",
            caption=h,
            reply_markup=file_keyboard,
            parse_mode='HTML')
    except:
        await message.answer_photo(
            photo=FSInputFile("photo/file_global.jpg"),
            caption=h,
            reply_markup=file_keyboard,
            parse_mode='HTML')
    await new(message.from_user.id,message.from_user.username)



@dp.message(F.text == '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª')
async def process_main_file(message: types.Message, state: FSMContext):
    current_file = chek_file(message.from_user.id)
    if message.from_user.id in activ_chek():
        await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç")
        return
    await state.set_state(BroadcastState.glav_file)
    try:
        if not(str(current_file)=="None"):
            h=f"–¢–µ–∫—É—âee –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {current_file[0]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞:"
            await message.answer_photo(
                photo="AgACAgIAAxkDAAImWGf6kzxeRE-yYhLsE_UUvzb4Lm2CAALm5DEbWQPZSx_cRnCxbXrzAQADAgADdwADNgQ",
                caption=h,
                reply_markup=otmena_keyboard,
                parse_mode='HTML'
            )
        else:
            h="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä main.py):"
            await message.answer_photo(
                photo="AgACAgIAAxkDAAImWGf6kzxeRE-yYhLsE_UUvzb4Lm2CAALm5DEbWQPZSx_cRnCxbXrzAQADAgADdwADNgQ",
                caption=h,
                reply_markup=otmena_keyboard,
                parse_mode='HTML'
            )
    except Exception as e:
        try:
            if not(str(current_file)=="nan"):
                h=f"–¢–µ–∫—É—âee –∏–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {current_file}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞:"
                await message.answer_photo(
                    photo=FSInputFile("photo/file.jpg"),
                    caption=h,
                    reply_markup=otmena_keyboard,
                    parse_mode='HTML'
                )
            else:
                h="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä main.py):"
                await message.answer_photo(
                    photo=FSInputFile("photo/file.jpg"),
                    caption=h,
                    reply_markup=otmena_keyboard,
                    parse_mode='HTML'
                )
        except:
            logger.error(f"Main file error: {e}")
            await message.answer("–û—à–∏–±–∫–∞!\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
    await new(message.from_user.id,message.from_user.username)

@dp.message(F.text == '–°–∫–∞—á–∞—Ç—å')
async def stop_script(message: types.Message, state: FSMContext):
    h="–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç:"
    try:
        await message.answer_photo(
            photo="AgACAgIAAxkDAAImi2f6lgNlOt2x9H9NQw4XmN6p8mjtAAID5TEbWQPZS33uugROgYKyAQADAgADdwADNgQ",
            caption=h,
            reply_markup=download,
            parse_mode='HTML')
    except:
        await message.answer_photo(
        photo=FSInputFile("photo/download.jpg"),
        caption=h,
        reply_markup=download,
        parse_mode='HTML')

@dp.message(StateFilter(BroadcastState.glav_file))
async def handle_main_file(message: types.Message, state: FSMContext):
    
    try:
        new_file = message.text.strip() 
        if not new_file.endswith('.py'):
            await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py!")
            return  
        if '/' in new_file or '\\' in new_file:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞!")
            return
        user_id=str(message.from_user.id)
        if chek_file(user_id) == None:
            nev_file(message.from_user.username,user_id,new_file,0,"–ù–µ—Ç")
        else:
            replase_file(user_id,new_file)
        if active_processes.get(user_id):
            await message.answer(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_file}",reply_markup=notmain_keyboard)
        else:
            await message.answer(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_file}",reply_markup=main_keyboard)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"File handling error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –≤ —à–∞–ø–∫–µ –±–æ—Ç–∞ üîù")
        await state.clear()
    await new(message.from_user.id,message.from_user.username)

@dp.message()
async def process_main_file(message: types.Message, state: FSMContext):
    await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –Ω–∞–ø–∏—à–∏ /start")
    await new(message.from_user.id,message.from_user.username)

async def on_startup():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    asyncio.create_task(send_db_periodically())  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, —Ñ–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

async def main():
    await start_csv()
    dp.startup.register(on_startup)
    r=Thread(target=test_aktivate)
    r.start()
    await dp.start_polling(bot)



if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Critical error: {e}")
